{"version":3,"file":"keymap.js","names":["logger","require","clipboard","module","exports","CodeMirror","defaultKeymap","_defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","replace","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","enterVimMode","cm","setOption","signal","mode","on","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","off","state","vim","detachVimMap","next","keyMap","rmClass","getWrapperElement","attach","attachVimMap","prev","addClass","defineOption","val","getOption","Init","test","cmKey","key","undefined","vimKey","cmKeyToVimKey","cmd","findKey","modifiers","Shift","Ctrl","Alt","Cmd","Mod","specialKeys","Enter","Backspace","Delete","Insert","charAt","pieces","split","lastPiece","length","hasCharacter","i","piece","isUpperCase","toLowerCase","join","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","ch","bigWordCharTest","makeKeyRange","start","size","push","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","line","firstLine","lastLine","isLowerCase","k","isMatchableSymbol","indexOf","isNumber","isWhiteSpaceString","inArray","arr","options","defaultValue","aliases","callback","Error","value","cfg","option","scope","local","createCircularJumpList","pointer","head","tail","buffer","Array","add","oldCur","newCur","current","curMark","useNextSlot","cursor","trashMark","clear","setBookmark","markPos","find","cursorEqual","move","offset","mark","inc","cachedCursor","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","prototype","exitMacroRecordMode","macroModeState","vimGlobalState","enterMacroRecordMode","registerName","register","registerController","getRegister","openDialog","bottom","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","marks","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","lastCharacterSearch","increment","selectedCharacter","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","getVimGlobalState","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","logKey","handleEsc","exitVisualMode","exitInsertMode","doKeyToKey","match","exec","substring","index","handleKeyInsertMode","keyBuffer","debug","keysAreChars","commandDispatcher","matchCommand","slice","thisMatch","window","clearTimeout","setTimeout","selections","listSelections","here","replaceRange","pop","handleKeyNonInsertMode","keysMatcher","pushRepeatDigit","operation","curOp","isVimOp","processCommand","e","console","handleEx","input","defineMotion","defineAction","defineOperator","mapCommand","_mapCommand","defineRegister","prefixRepeat","motionRepeat","n","getRepeat","repeat","parseInt","reason","Register","text","insertModeChanges","searchQueries","setText","pushText","pushInsertModeChanges","pushSearchQuery","query","toString","registers","unnamedRegister","isValidRegister","reg","writeText","shiftNumericRegisters_","append","historyBuffer","iterator","initialPrefix","nextMatch","up","dir","element","j","pushInput","splice","reset","matches","commandMatches","full","partial","bestMatch","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","ignoreCase","smartCase","updateSearchQuery","showConfirm","onPromptClose","scrollTo","left","top","logSearchQuery","onPromptKeyUp","close","keyName","target","selectionEnd","selectionStart","Math","min","parsedQuery","scrollIntoView","findNext","clearSearchHighlight","onPromptKeyDown","e_stop","focus","shift","showPrompt","onClose","desc","searchPromptDesc","onKeyUp","onKeyDown","word","expandWordUnderCursor","isKeyword","getLine","end","escapeRegex","exArgs","origHead","copyCursor","clipCursorToContent","origAnchor","anchor","oldHead","oldAnchor","newHead","newAnchor","noRepeat","motionResult","motions","recordJumpPosition","Infinity","updateCmSelection","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","ranges","lineLength","tmp","expandSelectionToLine","clipToLine","exclusive","setSelections","primary","operatorMoveTo","operators","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","range","floor","moveToBottomLine","expandToLine","_cm","cur","isReversed","highlightSearchMatches","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","cursorIsBetween","moveByCharacters","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","moveToStartOfLine","charCoords","res","findPosV","hitSide","lastCharCoords","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","findSymbol","retval","clipPos","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","lineText","symbol","style","getTokenTypeAt","matched","findMatchingBracket","to","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","mirroredPairs","selfPaired","selectCompanionObject","findBeginningAndEnd","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fn","fillArray","times","change","args","finalHead","inVisualBlock","getRange","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","commands","newlineAndIndent","getSelection","replacement","replaceSelections","delete","includeLineBreak","indent","startLine","endLine","indentLine","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","classList","remove","JSON","stringify","max","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineFn","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","idx","lastSelectionCurEnd","selectedArea","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","lastCh","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","markName","replaceWith","replaceTo","replaceWithStr","incrementNumberToken","lineStr","re","numberStr","token","number","from","repeatLastEdit","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","getOffset","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","lineHead","atAnchor","atHead","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","setSelection","updateFakeCursor","headOffset","anchorOffset","right","getHead","moveHead","selection","lines","firstNonWS","search","_forward","noSymbol","wordStart","symbolToMode","m","M","findSymbolModes","bracket","isComplete","nextCh","symb","depth","reverseSymb","section","init","curMoveThrough","comment","found","method","preprocess","lineCount","curCh","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","words","eodCh","shortCircuit","firstWord","lastWord","charIdxInLine","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","bracketRegexp","openSym","curChar","scanForBracket","bracketRegex","chars","len","firstIndex","SearchState","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","searchState_","dialog","template","shortText","selectValueOnOpen","prompt","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","escapeNextChar","translateRegex","specials","unescape","out","specialComesNext","charUnescapes","translateRegexReplace","unescapes","unescapeRegexReplace","stream","StringStream","output","eol","peek","matcher","parseQuery","lastSearchRegister","RegExp","regexPart","forceIgnoreCase","flagsPart","regexp","openNotification","duration","alert","makePrompt","raw","regexEqual","r1","r2","props","rawQuery","source","matchSol","sol","skipToEnd","backUp","searchState","removeOverlay","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","occludeToleranceTop","occludeToleranceBottom","bottomY","history","doc","done","event","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","result","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","mapping","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","reverse","unique","pattern","parseArgs","eatSpace","opts","decimal","hex","octal","substr","err","lineStart","radix","numPart","textPart","matchPart","compareFn","a","b","anum","bnum","comparePatternFn","textOld","global","matchedLines","content","nextCommand","substitute","replacePart","trailing","count","confirm","startPos","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","searchCursor","exMode","lastPos","replaceAll","newText","_value","savedCallback","detach","insertModeChangeRegister","lastChange","selLength","logInsertModeChange","extra","fallthrough","imc","repeatInsertModeChanges","changeObj","maybeReset","handleExternalSelection","markText","className","somethingSelected","onKeyFound","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding"],"sources":["../src/keymap.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\nconst { logger } = require('inkdrop')\nconst { clipboard } = require('electron')\n\nmodule.exports = function (CodeMirror) {\n  var defaultKeymap = []\n  var _defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal' },\n    //\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    {\n      keys: '<Ins>',\n      type: 'action',\n      action: 'toggleOverwrite',\n      context: 'insert'\n    },\n    // Motions\n    {\n      keys: 'H',\n      type: 'motion',\n      motion: 'moveToTopLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'M',\n      type: 'motion',\n      motion: 'moveToMiddleLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'L',\n      type: 'motion',\n      motion: 'moveToBottomLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'h',\n      type: 'motion',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 'l',\n      type: 'motion',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: 'j',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: 'k',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: false, linewise: true }\n    },\n    {\n      keys: 'gj',\n      type: 'motion',\n      motion: 'moveByDisplayLines',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: 'gk',\n      type: 'motion',\n      motion: 'moveByDisplayLines',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 'w',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: false }\n    },\n    {\n      keys: 'W',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: false, bigWord: true }\n    },\n    {\n      keys: 'e',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: true, inclusive: true }\n    },\n    {\n      keys: 'E',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: {\n        forward: true,\n        wordEnd: true,\n        bigWord: true,\n        inclusive: true\n      }\n    },\n    {\n      keys: 'b',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false }\n    },\n    {\n      keys: 'B',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false, bigWord: true }\n    },\n    {\n      keys: 'ge',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: true, inclusive: true }\n    },\n    {\n      keys: 'gE',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: {\n        forward: false,\n        wordEnd: true,\n        bigWord: true,\n        inclusive: true\n      }\n    },\n    {\n      keys: '{',\n      type: 'motion',\n      motion: 'moveByParagraph',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    {\n      keys: '}',\n      type: 'motion',\n      motion: 'moveByParagraph',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: '<C-f>',\n      type: 'motion',\n      motion: 'moveByPage',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: '<C-b>',\n      type: 'motion',\n      motion: 'moveByPage',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: '<C-d>',\n      type: 'motion',\n      motion: 'moveByScroll',\n      motionArgs: { forward: true, explicitRepeat: true }\n    },\n    {\n      keys: '<C-u>',\n      type: 'motion',\n      motion: 'moveByScroll',\n      motionArgs: { forward: false, explicitRepeat: true }\n    },\n    {\n      keys: 'gg',\n      type: 'motion',\n      motion: 'moveToLineOrEdgeOfDocument',\n      motionArgs: {\n        forward: false,\n        explicitRepeat: true,\n        linewise: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'G',\n      type: 'motion',\n      motion: 'moveToLineOrEdgeOfDocument',\n      motionArgs: {\n        forward: true,\n        explicitRepeat: true,\n        linewise: true,\n        toJumplist: true\n      }\n    },\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    {\n      keys: '+',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, toFirstChar: true }\n    },\n    {\n      keys: '-',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: false, toFirstChar: true }\n    },\n    {\n      keys: '_',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, toFirstChar: true, repeatOffset: -1 }\n    },\n    {\n      keys: '$',\n      type: 'motion',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true }\n    },\n    {\n      keys: '%',\n      type: 'motion',\n      motion: 'moveToMatchedSymbol',\n      motionArgs: { inclusive: true, toJumplist: true }\n    },\n    {\n      keys: 'f<character>',\n      type: 'motion',\n      motion: 'moveToCharacter',\n      motionArgs: { forward: true, inclusive: true }\n    },\n    {\n      keys: 'F<character>',\n      type: 'motion',\n      motion: 'moveToCharacter',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 't<character>',\n      type: 'motion',\n      motion: 'moveTillCharacter',\n      motionArgs: { forward: true, inclusive: true }\n    },\n    {\n      keys: 'T<character>',\n      type: 'motion',\n      motion: 'moveTillCharacter',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: ';',\n      type: 'motion',\n      motion: 'repeatLastCharacterSearch',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: ',',\n      type: 'motion',\n      motion: 'repeatLastCharacterSearch',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: \"'<character>\",\n      type: 'motion',\n      motion: 'goToMark',\n      motionArgs: { toJumplist: true, linewise: true }\n    },\n    {\n      keys: '`<character>',\n      type: 'motion',\n      motion: 'goToMark',\n      motionArgs: { toJumplist: true }\n    },\n    {\n      keys: ']`',\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: '[`',\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: \"]'\",\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: \"['\",\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: false, linewise: true }\n    },\n    // the next two aren't motions but must come before more general motion declarations\n    {\n      keys: ']p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: true, isEdit: true, matchIndent: true }\n    },\n    {\n      keys: '[p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: false, isEdit: true, matchIndent: true }\n    },\n    {\n      keys: ']<character>',\n      type: 'motion',\n      motion: 'moveToSymbol',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: '[<character>',\n      type: 'motion',\n      motion: 'moveToSymbol',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    { keys: '|', type: 'motion', motion: 'moveToColumn' },\n    {\n      keys: 'o',\n      type: 'motion',\n      motion: 'moveToOtherHighlightedEnd',\n      context: 'visual'\n    },\n    {\n      keys: 'O',\n      type: 'motion',\n      motion: 'moveToOtherHighlightedEnd',\n      motionArgs: { sameLine: true },\n      context: 'visual'\n    },\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    {\n      keys: '>',\n      type: 'operator',\n      operator: 'indent',\n      operatorArgs: { indentRight: true }\n    },\n    {\n      keys: '<',\n      type: 'operator',\n      operator: 'indent',\n      operatorArgs: { indentRight: false }\n    },\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    {\n      keys: 'gu',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: true },\n      isEdit: true\n    },\n    {\n      keys: 'gU',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: false },\n      isEdit: true\n    },\n    {\n      keys: 'n',\n      type: 'motion',\n      motion: 'findNext',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: 'N',\n      type: 'motion',\n      motion: 'findNext',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    // Operator-Motion dual commands\n    {\n      keys: 'x',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true },\n      operatorMotionArgs: { visualLine: false }\n    },\n    {\n      keys: 'X',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: false },\n      operatorMotionArgs: { visualLine: true }\n    },\n    {\n      keys: 'D',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true },\n      context: 'normal'\n    },\n    {\n      keys: 'D',\n      type: 'operator',\n      operator: 'delete',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: 'Y',\n      type: 'operatorMotion',\n      operator: 'yank',\n      motion: 'expandToLine',\n      motionArgs: { linewise: true },\n      context: 'normal'\n    },\n    {\n      keys: 'Y',\n      type: 'operator',\n      operator: 'yank',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: 'C',\n      type: 'operatorMotion',\n      operator: 'change',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true },\n      context: 'normal'\n    },\n    {\n      keys: 'C',\n      type: 'operator',\n      operator: 'change',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: '~',\n      type: 'operatorMotion',\n      operator: 'changeCase',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true },\n      operatorArgs: { shouldMoveCursor: true },\n      context: 'normal'\n    },\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual' },\n    {\n      keys: '<C-w>',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false },\n      context: 'insert'\n    },\n    // Actions\n    {\n      keys: '<C-i>',\n      type: 'action',\n      action: 'jumpListWalk',\n      actionArgs: { forward: true }\n    },\n    {\n      keys: '<C-o>',\n      type: 'action',\n      action: 'jumpListWalk',\n      actionArgs: { forward: false }\n    },\n    {\n      keys: '<C-e>',\n      type: 'action',\n      action: 'scroll',\n      actionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: '<C-y>',\n      type: 'action',\n      action: 'scroll',\n      actionArgs: { forward: false, linewise: true }\n    },\n    {\n      keys: 'a',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'charAfter' },\n      context: 'normal'\n    },\n    {\n      keys: 'A',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'eol' },\n      context: 'normal'\n    },\n    {\n      keys: 'A',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'endOfSelectedArea' },\n      context: 'visual'\n    },\n    {\n      keys: 'i',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'inplace' },\n      context: 'normal'\n    },\n    {\n      keys: 'I',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'firstNonBlank' },\n      context: 'normal'\n    },\n    {\n      keys: 'I',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'startOfSelectedArea' },\n      context: 'visual'\n    },\n    {\n      keys: 'o',\n      type: 'action',\n      action: 'newLineAndEnterInsertMode',\n      isEdit: true,\n      interlaceInsertRepeat: true,\n      actionArgs: { after: true },\n      context: 'normal'\n    },\n    {\n      keys: 'O',\n      type: 'action',\n      action: 'newLineAndEnterInsertMode',\n      isEdit: true,\n      interlaceInsertRepeat: true,\n      actionArgs: { after: false },\n      context: 'normal'\n    },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    {\n      keys: 'V',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { linewise: true }\n    },\n    {\n      keys: '<C-v>',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { blockwise: true }\n    },\n    {\n      keys: '<C-q>',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { blockwise: true }\n    },\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    {\n      keys: 'p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: true, isEdit: true }\n    },\n    {\n      keys: 'P',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: false, isEdit: true }\n    },\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    {\n      keys: 'R',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { replace: true }\n    },\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    {\n      keys: 'u',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: true },\n      context: 'visual',\n      isEdit: true\n    },\n    {\n      keys: 'U',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: false },\n      context: 'visual',\n      isEdit: true\n    },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    {\n      keys: 'zz',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'center' }\n    },\n    {\n      keys: 'z.',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'center' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    {\n      keys: 'zt',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'top' }\n    },\n    {\n      keys: 'z<CR>',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'top' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    {\n      keys: 'z-',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'bottom' }\n    },\n    {\n      keys: 'zb',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'bottom' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    {\n      keys: '<C-a>',\n      type: 'action',\n      action: 'incrementNumberToken',\n      isEdit: true,\n      actionArgs: { increase: true, backtrack: false }\n    },\n    {\n      keys: '<C-x>',\n      type: 'action',\n      action: 'incrementNumberToken',\n      isEdit: true,\n      actionArgs: { increase: false, backtrack: false }\n    },\n    {\n      keys: '<C-t>',\n      type: 'action',\n      action: 'indent',\n      actionArgs: { indentRight: true },\n      context: 'insert'\n    },\n    {\n      keys: '<C-d>',\n      type: 'action',\n      action: 'indent',\n      actionArgs: { indentRight: false },\n      context: 'insert'\n    },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    {\n      keys: 'i<character>',\n      type: 'motion',\n      motion: 'textObjectManipulation',\n      motionArgs: { textObjectInner: true }\n    },\n    // Search\n    {\n      keys: '/',\n      type: 'search',\n      searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }\n    },\n    {\n      keys: '?',\n      type: 'search',\n      searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }\n    },\n    {\n      keys: '*',\n      type: 'search',\n      searchArgs: {\n        forward: true,\n        querySrc: 'wordUnderCursor',\n        wholeWordOnly: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: '#',\n      type: 'search',\n      searchArgs: {\n        forward: false,\n        querySrc: 'wordUnderCursor',\n        wholeWordOnly: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'g*',\n      type: 'search',\n      searchArgs: {\n        forward: true,\n        querySrc: 'wordUnderCursor',\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'g#',\n      type: 'search',\n      searchArgs: {\n        forward: false,\n        querySrc: 'wordUnderCursor',\n        toJumplist: true\n      }\n    },\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ]\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ]\n\n  var Pos = CodeMirror.Pos\n\n  var Vim = function () {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true)\n      cm.setOption('showCursorWhenSelecting', false)\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      cm.on('cursorActivity', onCursorActivity)\n      maybeInitVimState(cm)\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm))\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false)\n      cm.off('cursorActivity', onCursorActivity)\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm))\n      cm.state.vim = null\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), 'cm-fat-cursor')\n      }\n\n      if (!next || next.attach != attachVimMap) {\n        leaveVimMode(cm)\n      }\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), 'cm-fat-cursor')\n      }\n\n      if (!prev || prev.attach != attachVimMap) {\n        enterVimMode(cm)\n      }\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function (cm, val, prev) {\n      if (val && cm.getOption('keyMap') != 'vim') {\n        cm.setOption('keyMap', 'vim')\n      } else if (\n        !val &&\n        prev != CodeMirror.Init &&\n        /^vim/.test(cm.getOption('keyMap'))\n      ) {\n        cm.setOption('keyMap', 'default')\n      }\n    })\n\n    function cmKey(key, cm) {\n      if (!cm) {\n        return undefined\n      }\n      if (this[key]) {\n        return this[key]\n      }\n      var vimKey = cmKeyToVimKey(key)\n      if (!vimKey) {\n        return false\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey)\n      if (typeof cmd === 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey)\n      }\n      return cmd\n    }\n\n    var modifiers = { Shift: 'S', Ctrl: 'C', Alt: 'A', Cmd: 'D', Mod: 'A' }\n    var specialKeys = {\n      Enter: 'CR',\n      Backspace: 'BS',\n      Delete: 'Del',\n      Insert: 'Ins'\n    }\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == \"'\") {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1)\n      }\n      var pieces = key.split(/-(?!$)/)\n      var lastPiece = pieces[pieces.length - 1]\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false\n      } else if (\n        pieces.length == 2 &&\n        pieces[0] == 'Shift' &&\n        lastPiece.length == 1\n      ) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false\n      }\n      var hasCharacter = false\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i]\n        if (piece in modifiers) {\n          pieces[i] = modifiers[piece]\n        } else {\n          hasCharacter = true\n        }\n        if (piece in specialKeys) {\n          pieces[i] = specialKeys[piece]\n        }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase()\n      }\n      return '<' + pieces.join('-') + '>'\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function () {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1))\n            actions.enterInsertMode(cm, {}, vim)\n          }\n        }\n      }\n      return vim.onPasteFn\n    }\n\n    var numberRegex = /[\\d]/\n    var wordCharTest = [\n        CodeMirror.isWordChar,\n        function (ch) {\n          return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch)\n        }\n      ],\n      bigWordCharTest = [\n        function (ch) {\n          return /\\S/.test(ch)\n        }\n      ]\n    function makeKeyRange(start, size) {\n      var keys = []\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i))\n      }\n      return keys\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26)\n    var lowerCaseAlphabet = makeKeyRange(97, 26)\n    var numbers = makeKeyRange(48, 10)\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, [\n      '<',\n      '>'\n    ])\n    var validRegisters = [].concat(\n      upperCaseAlphabet,\n      lowerCaseAlphabet,\n      numbers,\n      ['-', '\"', '.', ':', '/']\n    )\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine()\n    }\n    function isLowerCase(k) {\n      return /^[a-z]$/.test(k)\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1\n    }\n    function isNumber(k) {\n      return numberRegex.test(k)\n    }\n    function isUpperCase(k) {\n      return /^[A-Z]$/.test(k)\n    }\n    function isWhiteSpaceString(k) {\n      return /^\\s*$/.test(k)\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true\n        }\n      }\n      return false\n    }\n\n    var options = {}\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided')\n      }\n      if (!type) {\n        type = 'string'\n      }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      }\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name]\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue)\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value)\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined)\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm)\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = { value: value }\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm)\n        if (scope !== 'global' && local !== undefined) {\n          return local\n        }\n        if (scope !== 'local') {\n          return option.callback()\n        }\n      } else {\n        var local = scope !== 'global' && cm && cm.state.vim.options[name]\n        return (local || (scope !== 'local' && option) || {}).value\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function (name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode')\n        return mode == 'null' ? '' : mode\n      } else {\n        var mode = name == '' ? 'null' : name\n        cm.setOption('mode', mode)\n      }\n    })\n\n    var createCircularJumpList = function () {\n      var size = 100\n      var pointer = -1\n      var head = 0\n      var tail = 0\n      var buffer = new Array(size)\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size\n        var curMark = buffer[current]\n        function useNextSlot(cursor) {\n          var next = ++pointer % size\n          var trashMark = buffer[next]\n          if (trashMark) {\n            trashMark.clear()\n          }\n          buffer[next] = cm.setBookmark(cursor)\n        }\n        if (curMark) {\n          var markPos = curMark.find()\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur)\n          }\n        } else {\n          useNextSlot(oldCur)\n        }\n        useNextSlot(newCur)\n        head = pointer\n        tail = pointer - size + 1\n        if (tail < 0) {\n          tail = 0\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset\n        if (pointer > head) {\n          pointer = head\n        } else if (pointer < tail) {\n          pointer = tail\n        }\n        var mark = buffer[(size + pointer) % size]\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1\n          var newCur\n          var oldCur = cm.getCursor()\n          do {\n            pointer += inc\n            mark = buffer[(size + pointer) % size]\n            // skip marks that are the same as current position\n            if (\n              mark &&\n              (newCur = mark.find()) &&\n              !cursorEqual(oldCur, newCur)\n            ) {\n              break\n            }\n          } while (pointer < head && pointer > tail)\n        }\n        return mark\n      }\n      return {\n        cachedCursor: undefined, // used for # and * jumps\n        add: add,\n        move: move\n      }\n    }\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function (c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        }\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      }\n    }\n\n    function MacroModeState() {\n      this.latestRegister = undefined\n      this.isPlaying = false\n      this.isRecording = false\n      this.replaySearchQueries = []\n      this.onRecordingDone = undefined\n      this.lastInsertModeChanges = createInsertModeChanges()\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function () {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone() // close dialog\n        }\n        macroModeState.onRecordingDone = undefined\n        macroModeState.isRecording = false\n      },\n      enterMacroRecordMode: function (cm, registerName) {\n        var register =\n          vimGlobalState.registerController.getRegister(registerName)\n        if (register) {\n          register.clear()\n          this.latestRegister = registerName\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n              '(recording)[' + registerName + ']',\n              null,\n              { bottom: true }\n            )\n          }\n          this.isRecording = true\n        }\n      }\n    }\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        }\n      }\n      return cm.state.vim\n    }\n    var vimGlobalState\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState(),\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {\n          increment: 0,\n          forward: true,\n          selectedCharacter: ''\n        },\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController: new HistoryController()\n      }\n      for (var optionName in options) {\n        var option = options[optionName]\n        option.value = option.defaultValue\n      }\n    }\n\n    var lastInsertModeKeyTimer\n    var vimApi = {\n      buildKeyMap: function () {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function () {\n        return vimGlobalState.registerController\n      },\n      resetVimGlobalState: resetVimGlobalState,\n      getVimGlobalState: function () {\n        return vimGlobalState\n      },\n      maybeInitVimState: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function (lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx)\n      },\n      unmap: function (lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx)\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function (name, prefix, func) {\n        if (!prefix) {\n          prefix = name\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error(\n            '(Vim.defineEx) \"' +\n              prefix +\n              '\" is not a prefix of \"' +\n              name +\n              '\", command not registered'\n          )\n        }\n        exCommands[name] = func\n        exCommandDispatcher.commandMap_[prefix] = {\n          name: name,\n          shortName: prefix,\n          type: 'api'\n        }\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin)\n        if (typeof command === 'function') {\n          return command()\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function (cm, key, origin) {\n        var vim = maybeInitVimState(cm)\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode()\n              clearInputState(cm)\n              return true\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key)\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm)\n            if (vim.visualMode) {\n              exitVisualMode(cm)\n            } else if (vim.insertMode) {\n              exitInsertMode(cm)\n            }\n            return true\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = /<\\w+-.+?>|<\\w+>|./.exec(keys)\n            key = match[0]\n            keys = keys.substring(match.index + key.length)\n            CodeMirror.Vim.handleKey(cm, key, 'mapping')\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) {\n            return true\n          }\n\n          var keys = (vim.inputState.keyBuffer = vim.inputState.keyBuffer + key)\n          logger.debug('keyBuffer:', keys)\n          var keysAreChars = key.length == 1\n          var match = commandDispatcher.matchCommand(\n            keys,\n            defaultKeymap,\n            vim.inputState,\n            'insert'\n          )\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type !== 'full') {\n            var keys = (vim.inputState.keyBuffer = keys.slice(1))\n            var thisMatch = commandDispatcher.matchCommand(\n              keys,\n              defaultKeymap,\n              vim.inputState,\n              'insert'\n            )\n            if (thisMatch.type !== 'none') {\n              match = thisMatch\n            }\n          }\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            if (lastInsertModeKeyTimer) {\n              window.clearTimeout(lastInsertModeKeyTimer)\n            }\n            lastInsertModeKeyTimer = window.setTimeout(() => {\n              if (vim.insertMode && vim.inputState.keyBuffer) {\n                clearInputState(cm)\n              }\n            }, getOption('insertModeEscKeysTimeout'))\n            return !keysAreChars\n          }\n\n          if (lastInsertModeKeyTimer) {\n            window.clearTimeout(lastInsertModeKeyTimer)\n          }\n          if (keysAreChars) {\n            var selections = cm.listSelections()\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head\n              cm.replaceRange(\n                '',\n                offsetCursor(here, 0, -(keys.length - 1)),\n                here,\n                '+input'\n              )\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop()\n          }\n          clearInputState(cm)\n          return match.command\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) {\n            return true\n          }\n\n          var keys = (vim.inputState.keyBuffer = vim.inputState.keyBuffer + key)\n          if (/^[1-9]\\d*$/.test(keys)) {\n            return true\n          }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (!keysMatcher) {\n            clearInputState(cm)\n            return false\n          }\n          var context = vim.visualMode ? 'visual' : 'normal'\n          var match = commandDispatcher.matchCommand(\n            keysMatcher[2] || keysMatcher[1],\n            defaultKeymap,\n            vim.inputState,\n            context\n          )\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            return true\n          }\n\n          vim.inputState.keyBuffer = ''\n          keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (keysMatcher[1] && keysMatcher[1] !== '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1])\n          }\n          return match.command\n        }\n\n        var command\n        if (vim.insertMode) {\n          command = handleKeyInsertMode()\n        } else {\n          command = handleKeyNonInsertMode()\n        }\n\n        logger.debug(\n          'keyBuffer::::',\n          command,\n          vim.inputState.keyBuffer,\n          vim.inputState.operator,\n          vim.inputState.operatorArgs\n        )\n\n        if (command === false) {\n          return undefined\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function () {\n            return true\n          }\n        } else {\n          return function () {\n            return cm.operation(function () {\n              cm.curOp.isVimOp = true\n              try {\n                if (command.type === 'keyToKey') {\n                  doKeyToKey(command.toKeys)\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command)\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined\n                maybeInitVimState(cm)\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e)\n                }\n                throw e\n              }\n              return true\n            })\n          }\n        }\n      },\n      handleEx: function (cm, input) {\n        exCommandDispatcher.processCommand(cm, input)\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode,\n      clearInputState: clearInputState,\n\n      cmKeyToVimKey: cmKeyToVimKey\n    }\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = []\n      this.motionRepeat = []\n\n      this.operator = null\n      this.operatorArgs = null\n      this.motion = null\n      this.motionArgs = null\n      this.keyBuffer = [] // For matching multi-key commands.\n      this.registerName = null // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function (n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n)\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n)\n      }\n    }\n    InputState.prototype.getRepeat = function () {\n      var repeat = 0\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10)\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10)\n        }\n      }\n      return repeat\n    }\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState()\n      CodeMirror.signal(cm, 'vim-command-done', reason)\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear()\n      this.keyBuffer = [text || '']\n      this.insertModeChanges = []\n      this.searchQueries = []\n      this.linewise = !!linewise\n      this.blockwise = !!blockwise\n    }\n    Register.prototype = {\n      setText: function (text, linewise, blockwise) {\n        this.keyBuffer = [text || '']\n        this.linewise = !!linewise\n        this.blockwise = !!blockwise\n      },\n      pushText: function (text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n')\n          }\n          this.linewise = true\n        }\n        this.keyBuffer.push(text)\n      },\n      pushInsertModeChanges: function (changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes))\n      },\n      pushSearchQuery: function (query) {\n        this.searchQueries.push(query)\n      },\n      clear: function () {\n        this.keyBuffer = []\n        this.insertModeChanges = []\n        this.searchQueries = []\n        this.linewise = false\n      },\n      toString: function () {\n        return this.keyBuffer.join('')\n      }\n    }\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character')\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name)\n      }\n      registers[name] = register\n      validRegisters.push(name)\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers\n      this.unnamedRegister = registers['\"'] = new Register()\n      registers['.'] = new Register()\n      registers[':'] = new Register()\n      registers['/'] = new Register()\n    }\n    RegisterController.prototype = {\n      pushText: function (registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n') {\n          text += '\\n'\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName)\n          ? this.getRegister(registerName)\n          : null\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              const reg = new Register(text, linewise, blockwise)\n              logger.debug('yanked:', reg)\n              this.registers['0'] = reg\n              clipboard.writeText(reg.keyBuffer[0])\n              break\n            case 'delete':\n            case 'change':\n              clipboard.writeText(text)\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise)\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_()\n                this.registers['1'] = new Register(text, linewise)\n              }\n              break\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise)\n          return\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName)\n        if (append) {\n          register.pushText(text, linewise)\n        } else {\n          register.setText(text, linewise, blockwise)\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise)\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function (name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister\n        }\n        name = name.toLowerCase()\n        if (!this.registers[name]) {\n          this.registers[name] = new Register()\n        }\n        return this.registers[name]\n      },\n      isValidRegister: function (name) {\n        return name && inArray(name, validRegisters)\n      },\n      shiftNumericRegisters_: function () {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1))\n        }\n      }\n    }\n    function HistoryController() {\n      this.historyBuffer = []\n      this.iterator = 0\n      this.initialPrefix = null\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer\n        var dir = up ? -1 : 1\n        if (this.initialPrefix === null) this.initialPrefix = input\n        for (\n          var i = this.iterator + dir;\n          up ? i >= 0 : i < historyBuffer.length;\n          i += dir\n        ) {\n          var element = historyBuffer[i]\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i\n              return element\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length\n          return this.initialPrefix\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0) return input\n      },\n      pushInput: function (input) {\n        var index = this.historyBuffer.indexOf(input)\n        if (index > -1) this.historyBuffer.splice(index, 1)\n        if (input.length) this.historyBuffer.push(input)\n      },\n      reset: function () {\n        this.initialPrefix = null\n        this.iterator = this.historyBuffer.length\n      }\n    }\n    var commandDispatcher = {\n      matchCommand: function (keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState)\n        if (!matches.full && !matches.partial) {\n          return { type: 'none' }\n        } else if (!matches.full && matches.partial) {\n          return { type: 'partial' }\n        }\n\n        var bestMatch\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i]\n          if (!bestMatch) {\n            bestMatch = match\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys)\n          if (!character) return { type: 'none' }\n          inputState.selectedCharacter = character\n        }\n        return { type: 'full', command: bestMatch }\n      },\n      processCommand: function (cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command)\n            break\n          case 'operator':\n            this.processOperator(cm, vim, command)\n            break\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command)\n            break\n          case 'action':\n            this.processAction(cm, vim, command)\n            break\n          case 'search':\n            this.processSearch(cm, vim, command)\n            break\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command)\n            break\n          default:\n            break\n        }\n      },\n      processMotion: function (cm, vim, command) {\n        vim.inputState.motion = command.motion\n        vim.inputState.motionArgs = copyArgs(command.motionArgs)\n        this.evalInput(cm, vim)\n      },\n      processOperator: function (cm, vim, command) {\n        var inputState = vim.inputState\n        if (inputState.operator) {\n          if (inputState.operator === command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine'\n            inputState.motionArgs = { linewise: true }\n            this.evalInput(cm, vim)\n            return\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm)\n          }\n        }\n        inputState.operator = command.operator\n        inputState.operatorArgs = copyArgs(command.operatorArgs)\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim)\n        }\n      },\n      processOperatorMotion: function (cm, vim, command) {\n        var visualMode = vim.visualMode\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs)\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true\n          }\n        }\n        this.processOperator(cm, vim, command)\n        if (!visualMode) {\n          this.processMotion(cm, vim, command)\n        }\n      },\n      processAction: function (cm, vim, command) {\n        var inputState = vim.inputState\n        var repeat = inputState.getRepeat()\n        var repeatIsExplicit = !!repeat\n        var actionArgs = copyArgs(command.actionArgs) || {}\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command)\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command)\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim)\n        }\n        actionArgs.repeat = repeat || 1\n        actionArgs.repeatIsExplicit = repeatIsExplicit\n        actionArgs.registerName = inputState.registerName\n        clearInputState(cm)\n        vim.lastMotion = null\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command)\n        }\n        actions[command.action](cm, actionArgs, vim)\n      },\n      processSearch: function (cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return\n        }\n        var forward = command.searchArgs.forward\n        var wholeWordOnly = command.searchArgs.wholeWordOnly\n        getSearchState(cm).setReversed(!forward)\n        var promptPrefix = forward ? '/' : '?'\n        var originalQuery = getSearchState(cm).getQuery()\n        var originalScrollPos = cm.getScrollInfo()\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query)\n          vimGlobalState.searchHistoryController.reset()\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase)\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query)\n            clearInputState(cm)\n            return\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: {\n              forward: true,\n              toJumplist: command.searchArgs.toJumplist\n            }\n          })\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */)\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query)\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e),\n            up,\n            offset\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            query =\n              vimGlobalState.searchHistoryController.nextMatch(query, up) || ''\n            close(query)\n            if (offset && e.target)\n              e.target.selectionEnd = e.target.selectionStart = Math.min(\n                offset,\n                e.target.value.length\n              )\n          } else {\n            if (\n              keyName != 'Left' &&\n              keyName != 'Right' &&\n              keyName != 'Ctrl' &&\n              keyName != 'Alt' &&\n              keyName != 'Shift'\n            ) {\n              vimGlobalState.searchHistoryController.reset()\n            }\n          }\n          var parsedQuery\n          try {\n            parsedQuery = updateSearchQuery(\n              cm,\n              query,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30)\n          } else {\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e)\n          if (\n            keyName == 'Esc' ||\n            keyName == 'Ctrl-C' ||\n            keyName == 'Ctrl-[' ||\n            (keyName == 'Backspace' && query == '')\n          ) {\n            vimGlobalState.searchHistoryController.pushInput(query)\n            vimGlobalState.searchHistoryController.reset()\n            updateSearchQuery(cm, originalQuery)\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e)\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift()\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            } else {\n              showPrompt(cm, {\n                onClose: onPromptClose,\n                prefix: promptPrefix,\n                desc: searchPromptDesc,\n                onKeyUp: onPromptKeyUp,\n                onKeyDown: onPromptKeyDown\n              })\n            }\n            break\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(\n              cm,\n              false /** inclusive */,\n              true /** forward */,\n              false /** bigWord */,\n              true /** noSymbol */\n            )\n            var isKeyword = true\n            if (!word) {\n              word = expandWordUnderCursor(\n                cm,\n                false /** inclusive */,\n                true /** forward */,\n                false /** bigWord */,\n                false /** noSymbol */\n              )\n              isKeyword = false\n            }\n            if (!word) {\n              return\n            }\n            var query = cm\n              .getLine(word.start.line)\n              .substring(word.start.ch, word.end.ch)\n            if (isKeyword && wholeWordOnly) {\n              query = '\\\\b' + query + '\\\\b'\n            } else {\n              query = escapeRegex(query)\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor()\n            cm.setCursor(word.start)\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            break\n        }\n      },\n      processEx: function (cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input)\n          vimGlobalState.exCommandHistoryController.reset()\n          exCommandDispatcher.processCommand(cm, input)\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e),\n            up,\n            offset\n          if (\n            keyName === 'Esc' ||\n            keyName === 'Ctrl-C' ||\n            keyName === 'Ctrl-[' ||\n            (keyName === 'Backspace' && input === '')\n          ) {\n            vimGlobalState.exCommandHistoryController.pushInput(input)\n            vimGlobalState.exCommandHistoryController.reset()\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          }\n          if (keyName === 'Up' || keyName === 'Down') {\n            CodeMirror.e_stop(e)\n            up = keyName === 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            input =\n              vimGlobalState.exCommandHistoryController.nextMatch(input, up) ||\n              ''\n            close(input)\n            if (offset && e.target)\n              e.target.selectionEnd = e.target.selectionStart = Math.min(\n                offset,\n                e.target.value.length\n              )\n          } else if (keyName === 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          } else {\n            if (\n              keyName !== 'Left' &&\n              keyName !== 'Right' &&\n              keyName !== 'Ctrl' &&\n              keyName !== 'Alt' &&\n              keyName !== 'Shift'\n            ) {\n              vimGlobalState.exCommandHistoryController.reset()\n            }\n          }\n        }\n        if (command.type === 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input)\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              value: \"'<,'>\",\n              onKeyDown: onPromptKeyDown\n            })\n          } else {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              onKeyDown: onPromptKeyDown\n            })\n          }\n        }\n      },\n      evalInput: function (cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState\n        var motion = inputState.motion\n        var motionArgs = inputState.motionArgs || {}\n        var operator = inputState.operator\n        var operatorArgs = inputState.operatorArgs || {}\n        var registerName = inputState.registerName\n        var sel = vim.sel\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(\n          vim.visualMode\n            ? clipCursorToContent(cm, sel.head)\n            : cm.getCursor('head')\n        )\n        var origAnchor = copyCursor(\n          vim.visualMode\n            ? clipCursorToContent(cm, sel.anchor)\n            : cm.getCursor('anchor')\n        )\n        var oldHead = copyCursor(origHead)\n        var oldAnchor = copyCursor(origAnchor)\n        var newHead, newAnchor\n        var repeat\n        if (operator) {\n          this.recordLastEdit(vim, inputState)\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride\n        } else {\n          repeat = inputState.getRepeat()\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true\n        } else if (\n          motionArgs.noRepeat ||\n          (!motionArgs.explicitRepeat && repeat === 0)\n        ) {\n          repeat = 1\n          motionArgs.repeatIsExplicit = false\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n            inputState.selectedCharacter\n        }\n        motionArgs.repeat = repeat\n        clearInputState(cm)\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim)\n          vim.lastMotion = motions[motion]\n          if (!motionResult) {\n            return\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult)\n              delete jumpList.cachedCursor\n            } else {\n              recordJumpPosition(cm, origHead, motionResult)\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0]\n            newHead = motionResult[1]\n          } else {\n            newHead = motionResult\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead)\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock)\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true)\n            }\n            newAnchor = newAnchor || oldAnchor\n            sel.anchor = newAnchor\n            sel.head = newHead\n            updateCmSelection(cm)\n            updateMark(\n              cm,\n              vim,\n              '<',\n              cursorIsBefore(newAnchor, newHead) ? newAnchor : newHead\n            )\n            updateMark(\n              cm,\n              vim,\n              '>',\n              cursorIsBefore(newAnchor, newHead) ? newHead : newAnchor\n            )\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead)\n            cm.setCursor(newHead.line, newHead.ch)\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor\n            var lastSel = operatorArgs.lastSel\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line)\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch)\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(\n                oldAnchor.line + lineOffset,\n                oldAnchor.ch + chOffset\n              )\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset)\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            }\n            vim.visualMode = true\n            vim.visualLine = lastSel.visualLine\n            vim.visualBlock = lastSel.visualBlock\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            }\n            updateCmSelection(cm)\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            }\n          }\n          var curStart, curEnd, linewise, mode\n          var cmSel\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor)\n            curEnd = cursorMax(sel.head, sel.anchor)\n            linewise = vim.visualLine || operatorArgs.linewise\n            mode = vim.visualBlock ? 'block' : linewise ? 'line' : 'char'\n            cmSel = makeCmSelection(\n              cm,\n              {\n                anchor: curStart,\n                head: curEnd\n              },\n              mode\n            )\n            if (linewise) {\n              var ranges = cmSel.ranges\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line)\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0)\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor)\n            curEnd = copyCursor(newHead || oldHead)\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart\n              curStart = curEnd\n              curEnd = tmp\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd)\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd)\n            }\n            mode = 'char'\n            var exclusive = !motionArgs.inclusive || linewise\n            cmSel = makeCmSelection(\n              cm,\n              {\n                anchor: curStart,\n                head: curEnd\n              },\n              mode,\n              exclusive\n            )\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary)\n          vim.lastMotion = null\n          operatorArgs.repeat = repeat // For indent in visual mode.\n          operatorArgs.registerName = registerName\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise\n          var operatorMoveTo = operators[operator](\n            cm,\n            operatorArgs,\n            cmSel.ranges,\n            oldAnchor,\n            newHead\n          )\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null)\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo)\n          }\n        }\n      },\n      recordLastEdit: function (vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) {\n          return\n        }\n        vim.lastEditInputState = inputState\n        vim.lastEditActionCommand = actionCommand\n        macroModeState.lastInsertModeChanges.changes = []\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false\n      }\n    }\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat - 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToMiddleLine: function (cm) {\n        var range = getUserVisibleLines(cm)\n        var line = Math.floor((range.top + range.bottom) * 0.5)\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToBottomLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat + 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      expandToLine: function (_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity)\n      },\n      findNext: function (cm, _head, motionArgs) {\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        if (!query) {\n          return\n        }\n        var prev = !motionArgs.forward\n        // If search is initiated with ? instead of /, negate direction.\n        prev = state.isReversed() ? !prev : prev\n        highlightSearchMatches(cm, query)\n        return findNext(cm, prev /** prev */, query, motionArgs.repeat)\n      },\n      goToMark: function (cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter)\n        if (pos) {\n          return motionArgs.linewise\n            ? {\n                line: pos.line,\n                ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line))\n              }\n            : pos\n        }\n        return null\n      },\n      moveToOtherHighlightedEnd: function (cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ]\n        } else {\n          return [vim.sel.head, vim.sel.anchor]\n        }\n      },\n      jumpToMark: function (cm, head, motionArgs, vim) {\n        var best = head\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue\n            }\n            var mark = vim.marks[key].find()\n            var isWrongDirection = motionArgs.forward\n              ? cursorIsBefore(mark, cursor)\n              : cursorIsBefore(cursor, mark)\n\n            if (isWrongDirection) {\n              continue\n            }\n            if (motionArgs.linewise && mark.line == cursor.line) {\n              continue\n            }\n\n            var equal = cursorEqual(cursor, best)\n            var between = motionArgs.forward\n              ? cursorIsBetween(cursor, mark, best)\n              : cursorIsBetween(best, mark, cursor)\n\n            if (equal || between) {\n              best = mark\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(\n            best.line,\n            findFirstNonWhiteSpaceCharacter(cm.getLine(best.line))\n          )\n        }\n        return best\n      },\n      moveByCharacters: function (_cm, head, motionArgs) {\n        var cur = head\n        var repeat = motionArgs.repeat\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat\n        return Pos(cur.line, ch)\n      },\n      moveByLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        var endCh = cur.ch\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos\n            break\n          default:\n            vim.lastHPos = endCh\n        }\n        var repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0)\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat\n        var first = cm.firstLine()\n        var last = cm.lastLine()\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first) {\n          return this.moveToStartOfLine(cm, head, motionArgs, vim)\n        } else if (line > last && cur.line == last) {\n          return this.moveToEol(cm, head, motionArgs, vim)\n        }\n        if (motionArgs.toFirstChar) {\n          endCh = findFirstNonWhiteSpaceCharacter(cm.getLine(line))\n          vim.lastHPos = endCh\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh), 'div').left\n        return Pos(line, endCh)\n      },\n      moveByDisplayLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break\n          default:\n            vim.lastHSPos = cm.charCoords(cur, 'div').left\n        }\n        var repeat = motionArgs.repeat\n        var res = cm.findPosV(\n          cur,\n          motionArgs.forward ? repeat : -repeat,\n          'line',\n          vim.lastHSPos\n        )\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div')\n            var goalCoords = {\n              top: lastCharCoords.top + 8,\n              left: vim.lastHSPos\n            }\n            var res = cm.coordsChar(goalCoords, 'div')\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div')\n            resCoords.left = vim.lastHSPos\n            res = cm.coordsChar(resCoords, 'div')\n          }\n        }\n        vim.lastHPos = res.ch\n        return res\n      },\n      moveByPage: function (cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head\n        var repeat = motionArgs.repeat\n        return cm.findPosV(\n          curStart,\n          motionArgs.forward ? repeat : -repeat,\n          'page'\n        )\n      },\n      moveByParagraph: function (cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1\n        return findParagraph(cm, head, motionArgs.repeat, dir)\n      },\n      moveByScroll: function (cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo()\n        var curEnd = null\n        var repeat = motionArgs.repeat\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight())\n        }\n        var orig = cm.charCoords(head, 'local')\n        motionArgs.repeat = repeat\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim)\n        if (!curEnd) {\n          return null\n        }\n        var dest = cm.charCoords(curEnd, 'local')\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top)\n        return curEnd\n      },\n      moveByWords: function (cm, head, motionArgs) {\n        return moveToWord(\n          cm,\n          head,\n          motionArgs.repeat,\n          !!motionArgs.forward,\n          !!motionArgs.wordEnd,\n          !!motionArgs.bigWord\n        )\n      },\n      moveTillCharacter: function (cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat\n        var curEnd = moveToCharacter(\n          cm,\n          repeat,\n          motionArgs.forward,\n          motionArgs.selectedCharacter\n        )\n        var increment = motionArgs.forward ? -1 : 1\n        recordLastCharacterSearch(increment, motionArgs)\n        if (!curEnd) return null\n        curEnd.ch += increment\n        return curEnd\n      },\n      moveToCharacter: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        recordLastCharacterSearch(0, motionArgs)\n        logger.debug('moveToCharacter:', motionArgs)\n        return (\n          moveToCharacter(\n            cm,\n            repeat,\n            motionArgs.forward,\n            motionArgs.selectedCharacter\n          ) || head\n        )\n      },\n      moveToSymbol: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        return (\n          findSymbol(\n            cm,\n            repeat,\n            motionArgs.forward,\n            motionArgs.selectedCharacter\n          ) || head\n        )\n      },\n      moveToColumn: function (cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1\n        vim.lastHSPos = cm.charCoords(head, 'div').left\n        return moveToColumn(cm, repeat)\n      },\n      moveToEol: function (cm, head, motionArgs, vim) {\n        var cur = head\n        vim.lastHPos = Infinity\n        var retval = Pos(cur.line + motionArgs.repeat - 1, Infinity)\n        var end = cm.clipPos(retval)\n        end.ch--\n        vim.lastHSPos = cm.charCoords(end, 'div').left\n        return retval\n      },\n      moveToFirstNonWhiteSpaceCharacter: function (cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head\n        return Pos(\n          cursor.line,\n          findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line))\n        )\n      },\n      moveToMatchedSymbol: function (cm, head) {\n        var cursor = head\n        var line = cursor.line\n        var ch = cursor.ch\n        var lineText = cm.getLine(line)\n        var symbol\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch)\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1))\n            if (style !== 'string' && style !== 'comment') {\n              break\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch))\n          return matched.to\n        } else {\n          return cursor\n        }\n      },\n      moveToStartOfLine: function (_cm, head) {\n        return Pos(head.line, 0)\n      },\n      moveToLineOrEdgeOfDocument: function (cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine()\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber')\n        }\n        return Pos(\n          lineNum,\n          findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum))\n        )\n      },\n      textObjectManipulation: function (cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {\n          '(': ')',\n          ')': '(',\n          '{': '}',\n          '}': '{',\n          '[': ']',\n          ']': '['\n        }\n        var selfPaired = { \"'\": true, '\"': true }\n\n        var character = motionArgs.selectedCharacter\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '('\n        } else if (character == 'B') {\n          character = '{'\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner\n\n        var tmp\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive)\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive)\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(\n            cm,\n            inclusive,\n            true /** forward */,\n            true /** bigWord */\n          )\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(\n            cm,\n            inclusive,\n            true /** forward */,\n            false /** bigWord */\n          )\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive)\n          motionArgs.linewise = true\n          if (vim.visualMode) {\n            if (!vim.visualLine) {\n              vim.visualLine = true\n            }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs\n            if (operatorArgs) {\n              operatorArgs.linewise = true\n            }\n            tmp.end.line--\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end]\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end)\n        }\n      },\n\n      repeatLastCharacterSearch: function (cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch\n        var repeat = motionArgs.repeat\n        var forward = motionArgs.forward === lastSearch.forward\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1)\n        cm.moveH(-increment, 'char')\n        motionArgs.inclusive = !!forward\n        var curEnd = moveToCharacter(\n          cm,\n          repeat,\n          forward,\n          lastSearch.selectedCharacter\n        )\n        if (!curEnd) {\n          cm.moveH(increment, 'char')\n          return head\n        }\n        curEnd.ch += increment\n        return curEnd\n      }\n    }\n\n    function defineMotion(name, fn) {\n      motions[name] = fn\n    }\n\n    function fillArray(val, times) {\n      var arr = []\n      for (var i = 0; i < times; i++) {\n        arr.push(val)\n      }\n      return arr\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n     * match the input selection.\n     */\n    var operators = {\n      change: function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock =\n          vim.visualBlock\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          text = cm.getRange(anchor, head)\n          var lastState = vim.lastEditInputState || {}\n          if (lastState.motion == 'moveByWords' && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = /\\s+$/.exec(text)\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, -match[0].length)\n              text = text.slice(0, -match[0].length)\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE)\n          var wasLastLine = cm.firstLine() == cm.lastLine()\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head)\n          } else {\n            cm.replaceRange('', anchor, head)\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd)\n              CodeMirror.commands.newlineAndIndent(cm)\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE\n          }\n          finalHead = anchor\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor)\n        }\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'change',\n          text,\n          args.linewise,\n          ranges.length > 1\n        )\n        actions.enterInsertMode(cm, { head: finalHead }, cm.state.vim)\n      },\n      // delete is a javascript keyword.\n      delete: function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          if (\n            args.linewise &&\n            head.line != cm.firstLine() &&\n            anchor.line == cm.lastLine() &&\n            anchor.line == head.line - 1\n          ) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1))\n            }\n          }\n          text = cm.getRange(anchor, head)\n          cm.replaceRange('', anchor, head)\n          finalHead = anchor\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor)\n          }\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = ranges[0].anchor\n        }\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'delete',\n          text,\n          args.linewise,\n          vim.visualBlock\n        )\n        var includeLineBreak = vim.insertMode\n        return clipCursorToContent(cm, finalHead, includeLineBreak)\n      },\n      indent: function (cm, args, ranges) {\n        var vim = cm.state.vim\n        var startLine = ranges[0].anchor.line\n        var endLine = vim.visualBlock\n          ? ranges[ranges.length - 1].anchor.line\n          : ranges[0].head.line\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = vim.visualMode ? args.repeat : 1\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight)\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor)\n      },\n      changeCase: function (cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections()\n        var swapped = []\n        var toLower = args.toLower\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j]\n          var text = ''\n          if (toLower === true) {\n            text = toSwap.toLowerCase()\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase()\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i)\n              text += isUpperCase(character)\n                ? character.toLowerCase()\n                : character.toUpperCase()\n            }\n          }\n          swapped.push(text)\n        }\n        cm.replaceSelections(swapped)\n        if (args.shouldMoveCursor) {\n          return newHead\n        } else if (\n          !cm.state.vim.visualMode &&\n          args.linewise &&\n          ranges[0].anchor.line + 1 == ranges[0].head.line\n        ) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor)\n        } else if (args.linewise) {\n          return oldAnchor\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head)\n        }\n      },\n      yank: function (cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim\n        var text = cm.getSelection()\n        var endPos = vim.visualMode\n          ? cursorMin(\n              vim.sel.anchor,\n              vim.sel.head,\n              ranges[0].head,\n              ranges[0].anchor\n            )\n          : oldAnchor\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'yank',\n          text,\n          args.linewise,\n          vim.visualBlock\n        )\n        return endPos\n      }\n    }\n\n    function defineOperator(name, fn) {\n      operators[name] = fn\n    }\n\n    var actions = {\n      jumpListWalk: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat\n        var forward = actionArgs.forward\n        var jumpList = vimGlobalState.jumpList\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat)\n        var markPos = mark ? mark.find() : undefined\n        markPos = markPos || cm.getCursor()\n        cm.setCursor(markPos)\n      },\n      scroll: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat || 1\n        var lineHeight = cm.defaultTextHeight()\n        var top = cm.getScrollInfo().top\n        var delta = lineHeight * repeat\n        var newPos = actionArgs.forward ? top + delta : top - delta\n        var cursor = copyCursor(cm.getCursor())\n        var cursorCoords = cm.charCoords(cursor, 'local')\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n            cursor.line += (newPos - cursorCoords.top) / lineHeight\n            cursor.line = Math.ceil(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(null, cursorCoords.top)\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight\n          if (newBottom < cursorCoords.bottom) {\n            cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight\n            cursor.line = Math.floor(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(\n              null,\n              cursorCoords.bottom - cm.getScrollInfo().clientHeight\n            )\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        }\n      },\n      scrollToCursor: function (cm, actionArgs) {\n        var lineNum = cm.getCursor().line\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local')\n        var height = cm.getScrollInfo().clientHeight\n        var y = charCoords.top\n        var lineHeight = charCoords.bottom - y\n        switch (actionArgs.position) {\n          case 'center':\n            y = y - height / 2 + lineHeight\n            break\n          case 'bottom':\n            y = y - height + lineHeight\n            break\n        }\n        cm.scrollTo(null, y)\n      },\n      replayMacro: function (cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter\n        var repeat = actionArgs.repeat\n        var macroModeState = vimGlobalState.macroModeState\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister\n        }\n        while (repeat--) {\n          executeMacroRegister(cm, vim, macroModeState, registerName)\n        }\n      },\n      enterMacroRecordMode: function (cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState\n        var registerName = actionArgs.selectedCharacter\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName)\n        }\n      },\n      toggleOverwrite: function (cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'replace' })\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'insert' })\n        }\n      },\n      enterInsertMode: function (cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) {\n          return\n        }\n        cm.getWrapperElement().classList.add('insert-mode')\n        cm.getWrapperElement().classList.remove('visual-mode')\n        cm.getWrapperElement().classList.remove('normal-mode')\n        vim.insertMode = true\n        vim.insertModeRepeat = (actionArgs && actionArgs.repeat) || 1\n        var insertAt = actionArgs ? actionArgs.insertAt : null\n        var sel = vim.sel\n        var head = actionArgs.head || cm.getCursor('head')\n        var height = cm.listSelections().length\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line))\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1)\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head)\n        } else if (insertAt == 'startOfSelectedArea') {\n          logger.debug('startOfSelectedArea:', vim.visualBlock)\n          logger.debug('sel:', JSON.stringify(sel, null, 2))\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.min(sel.head.ch, sel.anchor.ch)\n            )\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1)\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.max(sel.head.ch + 1, sel.anchor.ch)\n            )\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode) {\n            return\n          }\n        }\n        cm.setOption('disableInput', false)\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'replace' })\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'insert' })\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange)\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n        }\n        selectForInsert(cm, head, height)\n      },\n      toggleVisualMode: function (cm, actionArgs, vim) {\n        logger.debug('toggleVisualMode', actionArgs)\n        var repeat = actionArgs.repeat\n        var anchor = cm.getCursor()\n        var head\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          head = clipCursorToContent(\n            cm,\n            Pos(anchor.line, anchor.ch + repeat - 1),\n            true /** includeLineBreak */\n          )\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n        } else if (\n          vim.visualLine ^ actionArgs.linewise ||\n          vim.visualBlock ^ actionArgs.blockwise\n        ) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n          updateCmSelection(cm)\n        } else {\n          exitVisualMode(cm)\n        }\n      },\n      reselectLastSelection: function (cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim)\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find()\n          var head = lastSelection.headMark.find()\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          vim.visualMode = true\n          vim.visualLine = lastSelection.visualLine\n          vim.visualBlock = lastSelection.visualBlock\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n        }\n      },\n      joinLines: function (cm, actionArgs, vim) {\n        var curStart, curEnd\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor')\n          curEnd = cm.getCursor('head')\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd\n            curEnd = curStart\n            curStart = tmp\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2)\n          curStart = cm.getCursor()\n          curEnd = clipCursorToContent(\n            cm,\n            Pos(curStart.line + repeat - 1, Infinity)\n          )\n        }\n        var finalCh = 0\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line)\n          var tmp = Pos(curStart.line + 1, lineLength(cm, curStart.line + 1))\n          var text = cm.getRange(curStart, tmp)\n          text = text.replace(/\\n\\s*/g, ' ')\n          cm.replaceRange(text, curStart, tmp)\n        }\n        var curFinalPos = Pos(curStart.line, finalCh)\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curFinalPos)\n      },\n      newLineAndEnterInsertMode: function (cm, actionArgs, vim) {\n        vim.insertMode = true\n        var insertAt = copyCursor(cm.getCursor())\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0))\n          cm.setCursor(cm.firstLine(), 0)\n        } else {\n          insertAt.line = actionArgs.after ? insertAt.line : insertAt.line - 1\n          insertAt.ch = lineLength(cm, insertAt.line)\n          cm.setCursor(insertAt)\n          var newlineFn =\n            CodeMirror.commands.newlineAndIndentContinueComment ||\n            CodeMirror.commands.newlineAndIndent\n          newlineFn(cm)\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim)\n      },\n      paste: function (cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor())\n        var register = vimGlobalState.registerController.getRegister(\n          actionArgs.registerName\n        )\n        var text = register.toString()\n        if (!text) {\n          return\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption('tabSize')\n          // length that considers tabs and tabSize\n          var whitespaceLength = function (str) {\n            var tabs = str.split('\\t').length - 1\n            var spaces = str.split(' ').length - 1\n            return tabs * tabSize + spaces * 1\n          }\n          var currentLine = cm.getLine(cm.getCursor().line)\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0])\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '')\n          var wasChomped = text !== chompedText\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0])\n          var text = chompedText.replace(/^\\s*/gm, function (wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent)\n            if (newIndent < 0) {\n              return ''\n            } else if (cm.getOption('indentWithTabs')) {\n              var quotient = Math.floor(newIndent / tabSize)\n              return Array(quotient + 1).join('\\t')\n            } else {\n              return Array(newIndent + 1).join(' ')\n            }\n          })\n          text += wasChomped ? '\\n' : ''\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text)\n        }\n        var linewise = register.linewise\n        var blockwise = register.blockwise\n        if (linewise) {\n          if (vim.visualMode) {\n            text = vim.visualLine\n              ? text.slice(0, -1)\n              : '\\n' + text.slice(0, text.length - 1) + '\\n'\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1)\n            cur.ch = lineLength(cm, cur.line)\n          } else {\n            cur.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n')\n            for (var i = 0; i < text.length; i++) {\n              text[i] = text[i] == '' ? ' ' : text[i]\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0\n        }\n        var curPosFinal\n        var idx\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text\n          var lastSelectionCurEnd\n          var selectedArea = getSelectedAreaRange(cm, vim)\n          var selectionStart = selectedArea[0]\n          var selectionEnd = selectedArea[1]\n          var selectedText = cm.getSelection()\n          var selections = cm.listSelections()\n          var emptyStrings = new Array(selections.length).join('1').split('1')\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find()\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(\n            selectedText\n          )\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings)\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(\n              selectionStart.line + text.length - 1,\n              selectionStart.ch\n            )\n            cm.setCursor(selectionStart)\n            selectBlock(cm, selectionEnd)\n            cm.replaceSelections(text)\n            curPosFinal = selectionStart\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings)\n            cm.setCursor(selectionStart)\n            cm.replaceRange(text, selectionStart, selectionStart)\n            curPosFinal = selectionStart\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd)\n            curPosFinal = cm.posFromIndex(\n              cm.indexFromPos(selectionStart) + text.length - 1\n            )\n          }\n          // restore the the curEnd marker\n          if (lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd)\n          }\n          if (linewise) {\n            curPosFinal.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur)\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line + i\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n', Pos(line, 0))\n              }\n              var lastCh = lineLength(cm, line)\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch)\n              }\n            }\n            cm.setCursor(cur)\n            selectBlock(cm, Pos(cur.line + text.length - 1, cur.ch))\n            cm.replaceSelections(text)\n            curPosFinal = cur\n          } else {\n            cm.replaceRange(text, cur)\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line + 1,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1))\n              )\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line))\n              )\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length - 1)\n            } else {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length)\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curPosFinal)\n      },\n      undo: function (cm, actionArgs) {\n        cm.operation(function () {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)()\n          cm.setCursor(cm.getCursor('anchor'))\n        })\n      },\n      redo: function (cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)()\n      },\n      setRegister: function (_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter\n      },\n      setMark: function (cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter\n        updateMark(cm, vim, markName, cm.getCursor())\n      },\n      replace: function (cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter\n        var curStart = cm.getCursor()\n        var replaceTo\n        var curEnd\n        var selections = cm.listSelections()\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start')\n          curEnd = cm.getCursor('end')\n        } else {\n          var line = cm.getLine(curStart.line)\n          replaceTo = curStart.ch + actionArgs.repeat\n          if (replaceTo > line.length) {\n            replaceTo = line.length\n          }\n          curEnd = Pos(curStart.line, replaceTo)\n        }\n        if (replaceWith == '\\n') {\n          if (!vim.visualMode)\n            cm.replaceRange('', curStart, curEnd)\n            // special case, where vim help says to replace by just one line-break\n          ;(\n            CodeMirror.commands.newlineAndIndentContinueComment ||\n            CodeMirror.commands.newlineAndIndent\n          )(cm)\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd)\n          // replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith)\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption('tabSize') + 1).join(' ')\n            replaceWithStr = cm.getSelection()\n            replaceWithStr = replaceWithStr\n              .replace(/\\t/g, spaces)\n              .replace(/[^\\n]/g, replaceWith)\n              .split('\\n')\n            cm.replaceSelections(replaceWithStr)\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd)\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head)\n              ? selections[0].anchor\n              : selections[0].head\n            cm.setCursor(curStart)\n            exitVisualMode(cm, false)\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1))\n          }\n        }\n      },\n      incrementNumberToken: function (cm, actionArgs) {\n        var cur = cm.getCursor()\n        var lineStr = cm.getLine(cur.line)\n        var re = /-?\\d+/g\n        var match\n        var start\n        var end\n        var numberStr\n        var token\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0]\n          start = match.index\n          end = start + token.length\n          if (cur.ch < end) break\n        }\n        if (!actionArgs.backtrack && end <= cur.ch) return\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1\n          var number = parseInt(token) + increment * actionArgs.repeat\n          var from = Pos(cur.line, start)\n          var to = Pos(cur.line, end)\n          numberStr = number.toString()\n          cm.replaceRange(numberStr, from, to)\n        } else {\n          return\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1))\n      },\n      repeatLastEdit: function (cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState\n        if (!lastEditInputState) {\n          return\n        }\n        var repeat = actionArgs.repeat\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */)\n      },\n      indent: function (cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight)\n      },\n      exitInsertMode: exitInsertMode\n    }\n\n    function defineAction(name, fn) {\n      actions[name] = fn\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine())\n      var maxCh = lineLength(cm, line) - 1\n      maxCh = includeLineBreak ? maxCh + 1 : maxCh\n      var ch = Math.min(Math.max(0, cur.ch), maxCh)\n      return Pos(line, ch)\n    }\n    function copyArgs(args) {\n      var ret = {}\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop]\n        }\n      }\n      return ret\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch\n        offsetLine = offsetLine.line\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh)\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      }\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match,\n        partial = [],\n        full = []\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i]\n        if (\n          (context == 'insert' && command.context != 'insert') ||\n          (command.context && command.context != context) ||\n          (inputState.operator && command.type == 'action') ||\n          !(match = commandMatch(keys, command.keys))\n        ) {\n          continue\n        }\n        if (match == 'partial') {\n          partial.push(command)\n        }\n        if (match == 'full') {\n          full.push(command)\n        }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      }\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11\n        var pressedPrefix = pressed.slice(0, prefixLen)\n        var mappedPrefix = mapped.slice(0, prefixLen)\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen\n          ? 'full'\n          : mappedPrefix.indexOf(pressedPrefix) == 0\n          ? 'partial'\n          : false\n      } else {\n        return pressed == mapped\n          ? 'full'\n          : mapped.indexOf(pressed) == 0\n          ? 'partial'\n          : false\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys)\n      var selectedCharacter = match ? match[1] : keys.slice(-1)\n      if (selectedCharacter.length > 1) {\n        switch (selectedCharacter) {\n          case '<CR>':\n            selectedCharacter = '\\n'\n            break\n          case '<Space>':\n            selectedCharacter = ' '\n            break\n          default:\n            selectedCharacter = ''\n            break\n        }\n      }\n      return selectedCharacter\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function () {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm)\n        }\n      }\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch)\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true\n      }\n      return false\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(\n          undefined,\n          Array.prototype.slice.call(arguments, 1)\n        )\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(\n          undefined,\n          Array.prototype.slice.call(arguments, 1)\n        )\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2)\n      var cur2before3 = cursorIsBefore(cur2, cur3)\n      return cur1before2 && cur2before3\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim()\n      }\n      return s.replace(/^\\s+|\\s+$/g, '')\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum)\n      var spaces = new Array(column - endCh + 1).join(' ')\n      cm.setCursor(Pos(lineNum, endCh))\n      cm.replaceRange(spaces, cm.getCursor())\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [],\n        ranges = cm.listSelections()\n      var head = copyCursor(cm.clipPos(selectionEnd))\n      var isClipped = !cursorEqual(selectionEnd, head)\n      var curHead = cm.getCursor('head')\n      var primIndex = getIndex(ranges, curHead)\n      var wasClipped = cursorEqual(\n        ranges[primIndex].head,\n        ranges[primIndex].anchor\n      )\n      var max = ranges.length - 1\n      var index = max - primIndex > primIndex ? max : 0\n      var base = ranges[index].anchor\n\n      var firstLine = Math.min(base.line, head.line)\n      var lastLine = Math.max(base.line, head.line)\n      var baseCh = base.ch,\n        headCh = head.ch\n\n      var dir = ranges[index].head.ch - baseCh\n      var newDir = headCh - baseCh\n      if (dir > 0 && newDir <= 0) {\n        baseCh++\n        if (!isClipped) {\n          headCh--\n        }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--\n        if (!wasClipped) {\n          headCh++\n        }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--\n        headCh++\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {\n          anchor: new Pos(line, baseCh),\n          head: new Pos(line, headCh)\n        }\n        selections.push(range)\n      }\n      cm.setSelections(selections)\n      selectionEnd.ch = headCh\n      base.ch = baseCh\n      return base\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = []\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0)\n        sel.push({ anchor: lineHead, head: lineHead })\n      }\n      cm.setSelections(sel, 0)\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor)\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor)\n        if (atAnchor || atHead) {\n          return i\n        }\n      }\n      return -1\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection\n      var getCurrentSelectedAreaRange = function () {\n        var selections = cm.listSelections()\n        var start = selections[0]\n        var end = selections[selections.length - 1]\n        var selectionStart = cursorIsBefore(start.anchor, start.head)\n          ? start.anchor\n          : start.head\n        var selectionEnd = cursorIsBefore(end.anchor, end.head)\n          ? end.head\n          : end.anchor\n        return [selectionStart, selectionEnd]\n      }\n      var getLastSelectedAreaRange = function () {\n        var selectionStart = cm.getCursor()\n        var selectionEnd = cm.getCursor()\n        var block = lastSelection.visualBlock\n        if (block) {\n          var width = block.width\n          var height = block.height\n          selectionEnd = Pos(\n            selectionStart.line + height,\n            selectionStart.ch + width\n          )\n          var selections = []\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch)\n            var head = Pos(i, selectionEnd.ch)\n            var range = { anchor: anchor, head: head }\n            selections.push(range)\n          }\n          cm.setSelections(selections)\n        } else {\n          var start = lastSelection.anchorMark.find()\n          var end = lastSelection.headMark.find()\n          var line = end.line - start.line\n          var ch = end.ch - start.ch\n          selectionEnd = {\n            line: selectionEnd.line + line,\n            ch: line ? selectionEnd.ch : ch + selectionEnd.ch\n          }\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0)\n            selectionEnd = Pos(\n              selectionEnd.line,\n              lineLength(cm, selectionEnd.line)\n            )\n          }\n          cm.setSelection(selectionStart, selectionEnd)\n        }\n        return [selectionStart, selectionEnd]\n      }\n      if (!vim.visualMode) {\n        // In case of replaying the action.\n        return getLastSelectedAreaRange()\n      } else {\n        return getCurrentSelectedAreaRange()\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor\n      var head = vim.sel.head\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(\n          cm.indexFromPos(anchor) + vim.lastPastedText.length\n        )\n        vim.lastPastedText = null\n      }\n      vim.lastSelection = {\n        anchorMark: cm.setBookmark(anchor),\n        headMark: cm.setBookmark(head),\n        anchor: copyCursor(anchor),\n        head: copyCursor(head),\n        visualMode: vim.visualMode,\n        visualLine: vim.visualLine,\n        visualBlock: vim.visualBlock\n      }\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel\n      var head = sel.head\n      var anchor = sel.anchor\n      var tmp\n      if (cursorIsBefore(end, start)) {\n        tmp = end\n        end = start\n        start = tmp\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head)\n        anchor = cursorMax(anchor, end)\n      } else {\n        anchor = cursorMin(start, anchor)\n        head = cursorMax(head, end)\n        head = offsetCursor(head, 0, -1)\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1))\n        }\n      }\n      return [anchor, head]\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim\n      sel = sel || vim.sel\n      var mode =\n        mode || vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char'\n      var cmSel = makeCmSelection(cm, sel, mode)\n      cm.setSelections(cmSel.ranges, cmSel.primary)\n      updateFakeCursor(cm)\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head)\n      var anchor = copyCursor(sel.anchor)\n      if (mode == 'char') {\n        var headOffset =\n          !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        head = offsetCursor(sel.head, 0, headOffset)\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset)\n        return {\n          ranges: [{ anchor: anchor, head: head }],\n          primary: 0\n        }\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0\n\n          var lastLine = cm.lastLine()\n          if (head.line > lastLine) {\n            head.line = lastLine\n          }\n          head.ch = lineLength(cm, head.line)\n        } else {\n          head.ch = 0\n          anchor.ch = lineLength(cm, anchor.line)\n        }\n        return {\n          ranges: [{ anchor: anchor, head: head }],\n          primary: 0\n        }\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n          left = Math.min(anchor.ch, head.ch),\n          bottom = Math.max(anchor.line, head.line),\n          right = Math.max(anchor.ch, head.ch) + 1\n        var height = bottom - top + 1\n        var primary = head.line == top ? 0 : height - 1\n        var ranges = []\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          })\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        }\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head')\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'))\n      }\n      return cur\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n     * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head))\n      }\n      updateLastSelection(cm, vim)\n      vim.visualMode = false\n      vim.visualLine = false\n      vim.visualBlock = false\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd)\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n')\n        // We know this is all whitespace.\n        lines.pop()\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (\n          var line = lines.pop();\n          lines.length > 0 && line && isWhiteSpaceString(line);\n          line = lines.pop()\n        ) {\n          curEnd.line--\n          curEnd.ch = 0\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--\n          curEnd.ch = lineLength(cm, curEnd.line)\n        } else {\n          curEnd.ch = 0\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0\n      curEnd.ch = 0\n      curEnd.line++\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0\n      }\n      var firstNonWS = text.search(/\\S/)\n      return firstNonWS == -1 ? text.length : firstNonWS\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm)\n      var line = cm.getLine(cur.line)\n      var idx = cur.ch\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest[0]\n      while (!test(line.charAt(idx))) {\n        idx++\n        if (idx >= line.length) {\n          return null\n        }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0]\n      } else {\n        test = wordCharTest[0]\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1]\n        }\n      }\n\n      var end = idx,\n        start = idx\n      while (test(line.charAt(end)) && end < line.length) {\n        end++\n      }\n      while (test(line.charAt(start)) && start >= 0) {\n        start--\n      }\n      start++\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end\n        while (/\\s/.test(line.charAt(end)) && end < line.length) {\n          end++\n        }\n        if (wordEnd == end) {\n          var wordStart = start\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) {\n            start--\n          }\n          if (!start) {\n            start = wordStart\n          }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) }\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur)\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n      vimGlobalState.lastCharacterSearch.increment = increment\n      vimGlobalState.lastCharacterSearch.forward = args.forward\n      vimGlobalState.lastCharacterSearch.selectedCharacter =\n        args.selectedCharacter\n    }\n\n    var symbolToMode = {\n      '(': 'bracket',\n      ')': 'bracket',\n      '{': 'bracket',\n      '}': 'bracket',\n      '[': 'section',\n      ']': 'section',\n      '*': 'comment',\n      '/': 'comment',\n      m: 'method',\n      M: 'method',\n      '#': 'preprocess'\n    }\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) {\n            state.depth++\n            if (state.depth >= 1) return true\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--\n          }\n          return false\n        }\n      },\n      section: {\n        init: function (state) {\n          state.curMoveThrough = true\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}'\n        },\n        isComplete: function (state) {\n          return state.index === 0 && state.nextCh === state.symb\n        }\n      },\n      comment: {\n        isComplete: function (state) {\n          var found = state.lastCh === '*' && state.nextCh === '/'\n          state.lastCh = state.nextCh\n          return found\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function (state) {\n          state.symb = state.symb === 'm' ? '{' : '}'\n          state.reverseSymb = state.symb === '{' ? '}' : '{'\n        },\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) return true\n          return false\n        }\n      },\n      preprocess: {\n        init: function (state) {\n          state.index = 0\n        },\n        isComplete: function (state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1]\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth++\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth--\n            }\n            if (token === 'else' && state.depth === 0) return true\n          }\n          return false\n        }\n      }\n    }\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor())\n      var increment = forward ? 1 : -1\n      var endLine = forward ? cm.lineCount() : -1\n      var curCh = cur.ch\n      var line = cur.line\n      var lineText = cm.getLine(line)\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward\n          ? { ')': '(', '}': '{' }\n          : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      }\n      var mode = symbolToMode[symb]\n      if (!mode) return cur\n      var init = findSymbolModes[mode].init\n      var isComplete = findSymbolModes[mode].isComplete\n      if (init) {\n        init(state)\n      }\n      while (line !== endLine && repeat) {\n        state.index += increment\n        state.nextCh = state.lineText.charAt(state.index)\n        if (!state.nextCh) {\n          line += increment\n          state.lineText = cm.getLine(line) || ''\n          if (increment > 0) {\n            state.index = 0\n          } else {\n            var lineLen = state.lineText.length\n            state.index = lineLen > 0 ? lineLen - 1 : 0\n          }\n          state.nextCh = state.lineText.charAt(state.index)\n        }\n        if (isComplete(state)) {\n          cur.line = line\n          cur.ch = state.index\n          repeat--\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index)\n      }\n      return cur\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line\n      var pos = cur.ch\n      var line = cm.getLine(lineNum)\n      var dir = forward ? 1 : -1\n      var charTests = bigWord ? bigWordCharTest : wordCharTest\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir\n        line = cm.getLine(lineNum)\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        pos = forward ? 0 : line.length\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum }\n        }\n        var stop = dir > 0 ? line.length : -1\n        var wordStart = stop,\n          wordEnd = stop\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir\n              }\n              wordEnd = pos\n              foundWord = wordStart != wordEnd\n              if (\n                wordStart == cur.ch &&\n                lineNum == cur.line &&\n                wordEnd == wordStart + dir\n              ) {\n                // We started at the end of a word. Find the next one.\n                continue\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum\n                }\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        line = cm.getLine(lineNum)\n        pos = dir > 0 ? 0 : line.length\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur)\n      var words = []\n      if ((forward && !wordEnd) || (!forward && wordEnd)) {\n        repeat++\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd)\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord)\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine())\n          words.push(\n            forward\n              ? { line: cm.lastLine(), from: eodCh, to: eodCh }\n              : { line: 0, from: 0, to: 0 }\n          )\n          break\n        }\n        words.push(word)\n        cur = Pos(word.line, forward ? word.to - 1 : word.from)\n      }\n      var shortCircuit = words.length != repeat\n      var firstWord = words[0]\n      var lastWord = words.pop()\n      if (forward && !wordEnd) {\n        // w\n        if (\n          !shortCircuit &&\n          (firstWord.from != curStart.ch || firstWord.line != curStart.line)\n        ) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.from)\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1)\n      } else if (!forward && wordEnd) {\n        // ge\n        if (\n          !shortCircuit &&\n          (firstWord.to != curStart.ch || firstWord.line != curStart.line)\n        ) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.to)\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from)\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor()\n      var start = cur.ch\n      var idx\n      for (var i = 0; i < repeat; i++) {\n        var line = cm.getLine(cur.line)\n        idx = charIdxInLine(start, line, character, forward, true)\n        if (idx == -1) {\n          return null\n        }\n        start = idx\n      }\n      return Pos(cm.getCursor().line, idx)\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line\n      return clipCursorToContent(cm, Pos(line, repeat - 1))\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear()\n      }\n      vim.marks[markName] = cm.setBookmark(pos)\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx\n      if (forward) {\n        idx = line.indexOf(character, start + 1)\n        if (idx != -1 && !includeChar) {\n          idx -= 1\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1)\n        if (idx != -1 && !includeChar) {\n          idx += 1\n        }\n      }\n      return idx\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line\n      var min = cm.firstLine()\n      var max = cm.lastLine()\n      var start,\n        end,\n        i = line\n      function isEmpty(i) {\n        return !cm.getLine(i)\n      }\n      function isBoundary(i, dir, any) {\n        if (any) {\n          return isEmpty(i) != isEmpty(i + dir)\n        }\n        return !isEmpty(i) && isEmpty(i + dir)\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) {\n            repeat--\n          }\n          i += dir\n        }\n        return new Pos(i, 0)\n      }\n\n      var vim = cm.state.vim\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1\n          }\n        }\n      }\n      var startState = isEmpty(line)\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--\n          }\n        }\n      }\n      end = new Pos(i, 0)\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) {\n        startState = true\n      } else {\n        inclusive = false\n      }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) {\n            break\n          }\n        }\n      }\n      start = new Pos(i, 0)\n      return { start: start, end: end }\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head,\n        start,\n        end\n\n      var bracketRegexp = {\n        '(': /[()]/,\n        ')': /[()]/,\n        '[': /[[\\]]/,\n        ']': /[[\\]]/,\n        '{': /[{}]/,\n        '}': /[{}]/\n      }[symb]\n      var openSym = {\n        '(': '(',\n        ')': '(',\n        '[': '[',\n        ']': '[',\n        '{': '{',\n        '}': '{'\n      }[symb]\n      var curChar = cm.getLine(cur.line).charAt(cur.ch)\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {\n        bracketRegex: bracketRegexp\n      })\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {\n        bracketRegex: bracketRegexp\n      })\n\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      start = start.pos\n      end = end.pos\n\n      if (\n        (start.line == end.line && start.ch > end.ch) ||\n        start.line > end.line\n      ) {\n        var tmp = start\n        start = end\n        end = tmp\n      }\n\n      if (inclusive) {\n        end.ch += 1\n      } else {\n        start.ch += 1\n      }\n\n      return { start: start, end: end }\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head)\n      var line = cm.getLine(cur.line)\n      var chars = line.split('')\n      var start, end, i, len\n      var firstIndex = chars.indexOf(symb)\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch // assign end to the current cursor\n        --cur.ch // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1 // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start\n        ++end\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      }\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean')\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function () {\n        return vimGlobalState.query\n      },\n      setQuery: function (query) {\n        vimGlobalState.query = query\n      },\n      getOverlay: function () {\n        return this.searchOverlay\n      },\n      setOverlay: function (overlay) {\n        this.searchOverlay = overlay\n      },\n      isReversed: function () {\n        return vimGlobalState.isReversed\n      },\n      setReversed: function (reversed) {\n        vimGlobalState.isReversed = reversed\n      },\n      getScrollbarAnnotate: function () {\n        return this.annotate\n      },\n      setScrollbarAnnotate: function (annotate) {\n        this.annotate = annotate\n      }\n    }\n    function getSearchState(cm) {\n      var vim = cm.state.vim\n      return vim.searchState_ || (vim.searchState_ = new SearchState())\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, {\n          bottom: true,\n          value: options.value,\n          onKeyDown: options.onKeyDown,\n          onKeyUp: options.onKeyUp,\n          selectValueOnOpen: false\n        })\n      } else {\n        onClose(prompt(shortText, ''))\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || []\n      if (!slashes.length) return []\n      var tokens = []\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] === 'number') {\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i + 1]))\n        }\n      }\n      return tokens\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false\n      var slashes = []\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i)\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i)\n        }\n        escapeNextChar = !escapeNextChar && c == '\\\\'\n      }\n      return slashes\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){'\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}'\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        var specialComesNext = n && specials.indexOf(n) != -1\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c)\n          }\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c)\n            }\n          } else {\n            out.push(c)\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = { '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t' }\n    function translateRegexReplace(str) {\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c + n])\n          i++\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c)\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            if (isNumber(n) || n === '$') {\n              out.push('$')\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          } else {\n            if (c === '$') {\n              out.push('$')\n            }\n            out.push(c)\n            if (n === '/') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {\n      '\\\\/': '/',\n      '\\\\\\\\': '\\\\',\n      '\\\\n': '\\n',\n      '\\\\r': '\\r',\n      '\\\\t': '\\t'\n    }\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str)\n      var output = []\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next())\n        }\n        var matched = false\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true\n            output.push(unescapes[matcher])\n            break\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next())\n        }\n      }\n      return output.join('')\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister =\n        vimGlobalState.registerController.getRegister('/')\n      lastSearchRegister.setText(query)\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) {\n        return query\n      }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query)\n      var regexPart\n      var forceIgnoreCase\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0])\n        var flagsPart = query.substring(slashes[0])\n        forceIgnoreCase = flagsPart.indexOf('i') != -1\n      }\n      if (!regexPart) {\n        return null\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart)\n      }\n      if (smartCase) {\n        ignoreCase = /^[^A-Z]*$/.test(regexPart)\n      }\n      var regexp = new RegExp(\n        regexPart,\n        ignoreCase || forceIgnoreCase ? 'i' : undefined\n      )\n      return regexp\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>', {\n          bottom: true,\n          duration: 5000\n        })\n      } else {\n        alert(text)\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw =\n        '<span style=\"font-family: monospace; white-space: pre\">' +\n        (prefix || '') +\n        '<input type=\"text\"></span>'\n      if (desc) {\n        raw += ' <span style=\"color: #888\">' + desc + '</span>'\n      }\n      return raw\n    }\n    var searchPromptDesc = '(Javascript regexp)'\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '')\n      var prompt = makePrompt(options.prefix, options.desc)\n      dialog(cm, prompt, shortText, options.onClose, options)\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n        var props = ['global', 'multiline', 'ignoreCase', 'source']\n        for (var i = 0; i < props.length; i++) {\n          var prop = props[i]\n          if (r1[prop] !== r2[prop]) {\n            return false\n          }\n        }\n        return true\n      }\n      return false\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return\n      }\n      var state = getSearchState(cm)\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase)\n      if (!query) {\n        return\n      }\n      highlightSearchMatches(cm, query)\n      if (regexEqual(query, state.getQuery())) {\n        return query\n      }\n      state.setQuery(query)\n      return query\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true\n      }\n      return {\n        token: function (stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd()\n            return\n          }\n          var match = stream.match(query, false)\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next()\n              return 'searching'\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1)\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next()\n                return null\n              }\n            }\n            stream.match(query)\n            return 'searching'\n          }\n          while (!stream.eol()) {\n            stream.next()\n            if (stream.match(query, false)) break\n          }\n        },\n        query: query\n      }\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm)\n      var overlay = searchState.getOverlay()\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay)\n        }\n        overlay = searchOverlay(query)\n        cm.addOverlay(overlay)\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear()\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query))\n        }\n        searchState.setOverlay(overlay)\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) {\n        repeat = 1\n      }\n      return cm.operation(function () {\n        var pos = cm.getCursor()\n        var cursor = cm.getSearchCursor(query, pos)\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev)\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            found = cursor.find(prev)\n          }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(\n              query,\n              prev ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0)\n            )\n            if (!cursor.find(prev)) {\n              return\n            }\n          }\n        }\n        return cursor.from()\n      })\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm)\n      cm.removeOverlay(getSearchState(cm).getOverlay())\n      state.setOverlay(null)\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear()\n        state.setScrollbarAnnotate(null)\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos !== 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start)\n      } else {\n        if (end) {\n          return pos >= start && pos <= end\n        } else {\n          return pos == start\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo()\n      var occludeToleranceTop = 6\n      var occludeToleranceBottom = 10\n      var from = cm.coordsChar(\n        { left: 0, top: occludeToleranceTop + scrollInfo.top },\n        'local'\n      )\n      var bottomY =\n        scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top\n      var to = cm.coordsChar({ left: 0, top: bottomY }, 'local')\n      return { top: from.line, bottom: to.line }\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == \"'\") {\n        var history = cm.doc.history.done\n        var event = history[history.length - 2]\n        return event && event.ranges && event.ranges[0].head\n      }\n\n      var mark = vim.marks[markName]\n      return mark && mark.find()\n    }\n\n    var ExCommandDispatcher = function () {\n      this.buildCommandMap_()\n    }\n    ExCommandDispatcher.prototype = {\n      processCommand: function (cm, input, opt_params) {\n        var that = this\n        cm.operation(function () {\n          cm.curOp.isVimOp = true\n          that._processCommand(cm, input, opt_params)\n        })\n      },\n      _processCommand: function (cm, input, opt_params) {\n        var vim = cm.state.vim\n        var commandHistoryRegister =\n          vimGlobalState.registerController.getRegister(':')\n        var previousCommand = commandHistoryRegister.toString()\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        var inputStream = new CodeMirror.StringStream(input)\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input)\n        var params = opt_params || {}\n        params.input = input\n        try {\n          this.parseInput_(cm, inputStream, params)\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n        var command\n        var commandName\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move'\n          }\n        } else {\n          command = this.matchCommand_(params.commandName)\n          if (command) {\n            commandName = command.name\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand)\n            }\n            this.parseCommandArgs_(inputStream, params, command)\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping')\n              }\n              return\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput)\n              return\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"')\n          return\n        }\n        try {\n          exCommands[commandName](cm, params)\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback()\n          }\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n      },\n      parseInput_: function (cm, inputStream, result) {\n        inputStream.eatWhile(':')\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine()\n          result.lineEnd = cm.lastLine()\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream)\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream)\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/)\n        if (commandMatch) {\n          result.commandName = commandMatch[1]\n        } else {\n          result.commandName = inputStream.match(/.*/)[0]\n        }\n\n        return result\n      },\n      parseLineSpec_: function (cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/)\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine())\n          case \"'\":\n            var markName = inputStream.next()\n            var markPos = getMarkPos(cm, cm.state.vim, markName)\n            if (!markPos) throw new Error('Mark not set')\n            return this.parseLineSpecOffset_(inputStream, markPos.line)\n          case '-':\n          case '+':\n            inputStream.backUp(1)\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          default:\n            inputStream.backUp(1)\n            return undefined\n        }\n      },\n      parseLineSpecOffset_: function (inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/)\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10)\n          if (offsetMatch[1] == '-') {\n            line -= offset\n          } else {\n            line += offset\n          }\n        }\n        return line\n      },\n      parseCommandArgs_: function (inputStream, params, command) {\n        if (inputStream.eol()) {\n          return\n        }\n        params.argString = inputStream.match(/.*/)[0]\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/\n        var args = trim(params.argString).split(delim)\n        if (args.length && args[0]) {\n          params.args = args\n        }\n      },\n      matchCommand_: function (commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i)\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix]\n            if (command.name.indexOf(commandName) === 0) {\n              return command\n            }\n          }\n        }\n        return null\n      },\n      buildCommandMap_: function () {\n        this.commandMap_ = {}\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i]\n          var key = command.shortName || command.name\n          this.commandMap_[key] = command\n        }\n      },\n      map: function (lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings')\n          }\n          var commandName = lhs.substring(1)\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            }\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            }\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            }\n            if (ctx) {\n              mapping.context = ctx\n            }\n            defaultKeymap.unshift(mapping)\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            }\n            if (ctx) {\n              mapping.context = ctx\n            }\n            defaultKeymap.unshift(mapping)\n          }\n        }\n      },\n      unmap: function (lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings')\n          }\n          var commandName = lhs.substring(1)\n          if (\n            this.commandMap_[commandName] &&\n            this.commandMap_[commandName].user\n          ) {\n            delete this.commandMap_[commandName]\n            return\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (\n              keys == defaultKeymap[i].keys &&\n              defaultKeymap[i].context === ctx\n            ) {\n              defaultKeymap.splice(i, 1)\n              return\n            }\n          }\n        }\n        throw Error('No such mapping.')\n      }\n    }\n\n    var exCommands = {\n      colorscheme: function (cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'))\n          return\n        }\n        cm.setOption('theme', params.args[0])\n      },\n      map: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx)\n      },\n      imap: function (cm, params) {\n        this.map(cm, params, 'insert')\n      },\n      nmap: function (cm, params) {\n        this.map(cm, params, 'normal')\n      },\n      vmap: function (cm, params) {\n        this.map(cm, params, 'visual')\n      },\n      unmap: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx)\n      },\n      move: function (cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n          type: 'motion',\n          motion: 'moveToLineOrEdgeOfDocument',\n          motionArgs: { forward: false, explicitRepeat: true, linewise: true },\n          repeatOverride: params.line + 1\n        })\n      },\n      set: function (cm, params) {\n        var setArgs = params.args\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {}\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        var expr = setArgs[0].split('=')\n        var optionName = expr[0]\n        var value = expr[1]\n        var forceGet = false\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) {\n            throw Error('Trailing characters: ' + params.argString)\n          }\n          optionName = optionName.substring(0, optionName.length - 1)\n          forceGet = true\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2)\n          value = false\n        }\n\n        var optionIsBoolean =\n          options[optionName] && options[optionName].type == 'boolean'\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true\n        }\n        // If no value is provided, then we assume this is a get.\n        if ((!optionIsBoolean && value === undefined) || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg)\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message)\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName)\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue)\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg)\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message)\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = { scope: 'local' }\n        this.set(cm, params)\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = { scope: 'global' }\n        this.set(cm, params)\n      },\n      registers: function (cm, params) {\n        var regArgs = params.args\n        var registers = vimGlobalState.registerController.registers\n        var regInfo = '----------Registers----------<br><br>'\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString()\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>'\n            }\n          }\n        } else {\n          var registerName\n          regArgs = regArgs.join('')\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i)\n            if (\n              !vimGlobalState.registerController.isValidRegister(registerName)\n            ) {\n              continue\n            }\n            var register = registers[registerName] || new Register()\n            regInfo +=\n              '\"' + registerName + '    ' + register.toString() + '<br>'\n          }\n        }\n        showConfirm(cm, regInfo)\n      },\n      sort: function (cm, params) {\n        var reverse, ignoreCase, unique, number, pattern\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString)\n            if (args.eat('!')) {\n              reverse = true\n            }\n            if (args.eol()) {\n              return\n            }\n            if (!args.eatSpace()) {\n              return 'Invalid arguments'\n            }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/)\n            if (!opts && !args.eol()) {\n              return 'Invalid arguments'\n            }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1\n              unique = opts[1].indexOf('u') != -1\n              var decimal =\n                opts[1].indexOf('d') != -1 || (opts[1].indexOf('n') != -1 && 1)\n              var hex = opts[1].indexOf('x') != -1 && 1\n              var octal = opts[1].indexOf('o') != -1 && 1\n              if (decimal + hex + octal > 1) {\n                return 'Invalid arguments'\n              }\n              number =\n                (decimal && 'decimal') || (hex && 'hex') || (octal && 'octal')\n            }\n            if (opts[2]) {\n              pattern = new RegExp(\n                opts[2].substr(1, opts[2].length - 2),\n                ignoreCase ? 'i' : ''\n              )\n            }\n          }\n        }\n        var err = parseArgs()\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString)\n          return\n        }\n        var lineStart = params.line || cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        if (lineStart == lineEnd) {\n          return\n        }\n        var curStart = Pos(lineStart, 0)\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd))\n        var text = cm.getRange(curStart, curEnd).split('\\n')\n        var numberRegex =\n          pattern || number == 'decimal'\n            ? /(-?)([\\d]+)/\n            : number == 'hex'\n            ? /(-?)(?:0x)?([0-9a-f]+)/i\n            : number == 'octal'\n            ? /([0-7]+)/\n            : null\n        var radix =\n          number == 'decimal'\n            ? 10\n            : number == 'hex'\n            ? 16\n            : number == 'octal'\n            ? 8\n            : null\n        var numPart = [],\n          textPart = []\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart)\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i])\n            } else {\n              textPart.push(text[i])\n            }\n          }\n        } else {\n          textPart = text\n        }\n        function compareFn(a, b) {\n          if (reverse) {\n            var tmp\n            tmp = a\n            a = b\n            b = tmp\n          }\n          if (ignoreCase) {\n            a = a.toLowerCase()\n            b = b.toLowerCase()\n          }\n          var anum = number && numberRegex.exec(a)\n          var bnum = number && numberRegex.exec(b)\n          if (!anum) {\n            return a < b ? -1 : 1\n          }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix)\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix)\n          return anum - bnum\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) {\n            var tmp\n            tmp = a\n            a = b\n            b = tmp\n          }\n          if (ignoreCase) {\n            a[0] = a[0].toLowerCase()\n            b[0] = b[0].toLowerCase()\n          }\n          return a[0] < b[0] ? -1 : 1\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn)\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input\n          }\n        } else if (!number) {\n          textPart.sort(compareFn)\n        }\n        text = !reverse ? textPart.concat(numPart) : numPart.concat(textPart)\n        if (unique) {\n          // Remove duplicate lines\n          var textOld = text\n          var lastLine\n          text = []\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i])\n            }\n            lastLine = textOld[i]\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd)\n      },\n      global: function (cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global')\n          return\n        }\n        // range is specified here\n        var lineStart = params.line !== undefined ? params.line : cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        // get the tokens from argString\n        var tokens = splitBySlash(argString)\n        var regexPart = argString,\n          cmd\n        if (tokens.length) {\n          regexPart = tokens[0]\n          cmd = tokens.slice(1, tokens.length).join('/')\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n            updateSearchQuery(\n              cm,\n              regexPart,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery()\n        var matchedLines = [],\n          content = ''\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i))\n          if (matched) {\n            matchedLines.push(i + 1)\n            content += cm.getLine(i) + '<br>'\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content)\n          return\n        }\n        var index = 0\n        var nextCommand = function () {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            })\n          }\n          index++\n        }\n        nextCommand()\n      },\n      substitute: function (cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error(\n            'Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.'\n          )\n        }\n        var argString = params.argString\n        var tokens = argString ? splitBySlash(argString) : []\n        var regexPart,\n          replacePart = '',\n          trailing,\n          flagsPart,\n          count\n        var confirm = false // Whether to confirm each replace.\n        var global = false // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0]\n          replacePart = tokens[1]\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n'\n            replacePart = replacePart ? replacePart + '\\n' : '\\n'\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart)\n            } else {\n              replacePart = translateRegexReplace(replacePart)\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : []\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(\n              cm,\n              'Substitutions should be of the form ' + ':s/pattern/replace/'\n            )\n            return\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0]\n          count = parseInt(trailing[1])\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true\n              flagsPart.replace('c', '')\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true\n              flagsPart.replace('g', '')\n            }\n            regexPart = regexPart + '/' + flagsPart\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(\n              cm,\n              regexPart,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression')\n          return\n        }\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        var lineStart =\n          params.line !== undefined ? params.line : cm.getCursor().line\n        var lineEnd = params.lineEnd || lineStart\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity\n        }\n        if (count) {\n          lineStart = lineEnd\n          lineEnd = lineStart + count - 1\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0))\n        var cursor = cm.getSearchCursor(query, startPos)\n        doReplace(\n          cm,\n          confirm,\n          global,\n          lineStart,\n          lineEnd,\n          cursor,\n          query,\n          replacePart,\n          params.callback\n        )\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function (cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm)\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save()\n        }\n      },\n      nohlsearch: function (cm) {\n        clearSearchHighlight(cm)\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor())\n        var line = cur.line\n        var lineText = cm.getLine(line)\n        vimGlobalState.registerController.pushText(\n          '0',\n          'yank',\n          lineText,\n          true,\n          true\n        )\n      },\n      delmarks: function (cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required')\n          return\n        }\n\n        var state = cm.state.vim\n        var stream = new CodeMirror.StringStream(trim(params.argString))\n        while (!stream.eol()) {\n          stream.eatSpace()\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(\n              cm,\n              'Invalid argument: ' + params.argString.substring(count)\n            )\n            return\n          }\n\n          var sym = stream.next()\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(\n                cm,\n                'Invalid argument: ' + params.argString.substring(count)\n              )\n              return\n            }\n\n            var startMark = sym\n            var finishMark = stream.next()\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (\n              (isLowerCase(startMark) && isLowerCase(finishMark)) ||\n              (isUpperCase(startMark) && isUpperCase(finishMark))\n            ) {\n              var start = startMark.charCodeAt(0)\n              var finish = finishMark.charCodeAt(0)\n              if (start >= finish) {\n                showConfirm(\n                  cm,\n                  'Invalid argument: ' + params.argString.substring(count)\n                )\n                return\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j)\n                delete state.marks[mark]\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-')\n              return\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym]\n          }\n        }\n      }\n    }\n\n    var exCommandDispatcher = new ExCommandDispatcher()\n\n    /**\n     * @param {CodeMirror} cm CodeMirror instance we are in.\n     * @param {boolean} confirm Whether to confirm each replace.\n     * @param {Cursor} lineStart Line to start replacing from.\n     * @param {Cursor} lineEnd Line to stop replacing at.\n     * @param {RegExp} query Query for performing matches with.\n     * @param {string} replaceWith Text to replace matches with. May contain $1,\n     *     $2, etc for replacing captured groups using Javascript replace.\n     * @param {function()} callback A callback for when the replace is done.\n     */\n    function doReplace(\n      cm,\n      confirm,\n      global,\n      lineStart,\n      lineEnd,\n      searchCursor,\n      query,\n      replaceWith,\n      callback\n    ) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true\n      var done = false\n      var lastPos = searchCursor.from()\n      function replaceAll() {\n        cm.operation(function () {\n          while (!done) {\n            replace()\n            next()\n          }\n          stop()\n        })\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to())\n        var newText = text.replace(query, replaceWith)\n        searchCursor.replace(newText)\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while (\n          searchCursor.findNext() &&\n          isInRange(searchCursor.from(), lineStart, lineEnd)\n        ) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue\n          }\n          cm.scrollIntoView(searchCursor.from(), 30)\n          cm.setSelection(searchCursor.from(), searchCursor.to())\n          lastPos = searchCursor.from()\n          done = false\n          return\n        }\n        done = true\n      }\n      function stop(close) {\n        if (close) {\n          close()\n        }\n        cm.focus()\n        if (lastPos) {\n          cm.setCursor(lastPos)\n          var vim = cm.state.vim\n          vim.exMode = false\n          vim.lastHPos = vim.lastHSPos = lastPos.ch\n        }\n        if (callback) {\n          callback()\n        }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e)\n        var keyName = CodeMirror.keyName(e)\n        switch (keyName) {\n          case 'Y':\n            replace()\n            next()\n            break\n          case 'N':\n            next()\n            break\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback\n            callback = undefined\n            cm.operation(replaceAll)\n            callback = savedCallback\n            break\n          case 'L':\n            replace()\n          // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close)\n            break\n        }\n        if (done) {\n          stop(close)\n        }\n        return true\n      }\n\n      // Actually do replace.\n      next()\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source)\n        return\n      }\n      if (!confirm) {\n        replaceAll()\n        if (callback) {\n          callback()\n        }\n        return\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      })\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim\n      var macroModeState = vimGlobalState.macroModeState\n      var insertModeChangeRegister =\n        vimGlobalState.registerController.getRegister('.')\n      var isPlaying = macroModeState.isPlaying\n      var lastChange = macroModeState.lastInsertModeChanges\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = []\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock\n          ? vim.lastSelection.visualBlock.height\n          : 1\n        var changes = lastChange.changes\n        var text = []\n        var i = 0\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i])\n          if (changes[i] instanceof InsertModeKey) {\n            i++\n          } else {\n            i += selLength\n          }\n        }\n        lastChange.changes = text\n        cm.off('change', onChange)\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(\n          cm,\n          vim,\n          vim.insertModeRepeat - 1,\n          true /** repeatForInsert */\n        )\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat\n      }\n      delete vim.insertModeRepeat\n      vim.insertMode = false\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch - 1)\n      cm.setOption('keyMap', 'vim')\n      cm.setOption('disableInput', true)\n      cm.toggleOverwrite(false) // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''))\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState)\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command)\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = { keys: keys, type: type }\n      command[type] = name\n      command[type + 'Args'] = args\n      for (var key in extra) {\n        command[key] = extra[key]\n      }\n      _mapCommand(command)\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number')\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      // fallthrough: ['default'],\n      fallthrough: [],\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    CodeMirror.keyMap['vim-replace'] = {\n      Backspace: 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0])\n        }\n        macroModeState.isPlaying = false\n        return\n      }\n      var keyBuffer = register.keyBuffer\n      var imc = 0\n      macroModeState.isPlaying = true\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0)\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i]\n        var match, key\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = /<\\w+-.+?>|<\\w+>|./.exec(text)\n          key = match[0]\n          text = text.substring(match.index + key.length)\n          CodeMirror.Vim.handleKey(cm, key, 'macro')\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n              changes\n            repeatInsertModeChanges(cm, changes, 1)\n            exitInsertMode(cm)\n          }\n        }\n      }\n      macroModeState.isPlaying = false\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register) {\n        register.pushText(key)\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges)\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query)\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      if (!macroModeState.isPlaying) {\n        while (changeObj) {\n          lastChange.expectCursorActivityForChange = true\n          if (\n            changeObj.origin == '+input' ||\n            changeObj.origin == 'paste' ||\n            changeObj.origin === undefined /* only in testing */\n          ) {\n            var text = changeObj.text.join('\\n')\n            if (lastChange.maybeReset) {\n              lastChange.changes = []\n              lastChange.maybeReset = false\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n              lastChange.changes.push([text])\n            } else {\n              lastChange.changes.push(text)\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next\n        }\n      }\n    }\n\n    /**\n     * Listens for any kind of cursor activity on CodeMirror.\n     */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) {\n          return\n        }\n        var lastChange = macroModeState.lastInsertModeChanges\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim)\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm)\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head))\n      var to = offsetCursor(from, 0, 1)\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n      vim.fakeCursor = cm.markText(from, to, {\n        className: 'cm-animate-fat-cursor'\n      })\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor')\n      var head = cm.getCursor('head')\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false)\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true\n        vim.visualLine = false\n        CodeMirror.signal(cm, 'vim-mode-change', { mode: 'visual' })\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0\n        head = offsetCursor(head, 0, headOffset)\n        anchor = offsetCursor(anchor, 0, anchorOffset)\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        }\n        updateMark(cm, vim, '<', cursorMin(head, anchor))\n        updateMark(cm, vim, '>', cursorMax(head, anchor))\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName\n    }\n\n    /**\n     * Handles raw key down events from the text area.\n     * - Should only be active in insert mode.\n     * - For recording deletes in insert mode.\n     */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      var keyName = CodeMirror.keyName(e)\n      if (!keyName) {\n        return\n      }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = []\n          lastChange.maybeReset = false\n        }\n        lastChange.changes.push(new InsertModeKey(keyName))\n        return true\n      }\n      if (\n        keyName.indexOf('Delete') != -1 ||\n        keyName.indexOf('Backspace') != -1\n      ) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound)\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState\n      macroModeState.isPlaying = true\n      var isAction = !!vim.lastEditActionCommand\n      var cachedInputState = vim.inputState\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand)\n        } else {\n          commandDispatcher.evalInput(cm, vim)\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat\n          var changeObject = macroModeState.lastInsertModeChanges\n          repeatInsertModeChanges(cm, changeObject.changes, repeat)\n        }\n      }\n      vim.inputState = vim.lastEditInputState\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand()\n          repeatInsert(1)\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand()\n        }\n        repeatInsert(repeat)\n      }\n      vim.inputState = cachedInputState\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm)\n      }\n      macroModeState.isPlaying = false\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding === 'string') {\n          CodeMirror.commands[binding](cm)\n        } else {\n          binding(cm)\n        }\n        return true\n      }\n      var head = cm.getCursor('head')\n      var inVisualBlock =\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim\n        var lastSel = vim.lastSelection\n        var offset = getOffset(lastSel.anchor, lastSel.head)\n        selectForInsert(cm, head, offset.line + 1)\n        repeat = cm.listSelections().length\n        cm.setCursor(head)\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0))\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j]\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler)\n          } else if (typeof change === 'string') {\n            var cur = cm.getCursor()\n            cm.replaceRange(change, cur, cur)\n          } else {\n            var start = cm.getCursor()\n            var end = offsetCursor(start, 0, change[0].length)\n            cm.replaceRange(change[0], start, end)\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1))\n      }\n    }\n\n    resetVimGlobalState()\n\n    vimApi.commandDispatcher = commandDispatcher\n    vimApi.exCommandDispatcher = exCommandDispatcher\n    return vimApi\n  }\n\n  // Initialize Vim and make it available as an API.\n  return (CodeMirror.Vim = Vim())\n}\n"],"mappings":"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"}