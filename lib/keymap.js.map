{"version":3,"sources":["../src/keymap.js"],"names":["logger","require","clipboard","module","exports","CodeMirror","defaultKeymap","_defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","replace","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","enterVimMode","cm","setOption","signal","mode","on","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","off","state","vim","detachVimMap","next","keyMap","rmClass","getWrapperElement","attach","attachVimMap","prev","addClass","defineOption","val","getOption","Init","test","cmKey","key","undefined","vimKey","cmKeyToVimKey","cmd","findKey","modifiers","Shift","Ctrl","Alt","Cmd","Mod","specialKeys","Enter","Backspace","Delete","Insert","charAt","pieces","split","lastPiece","length","hasCharacter","i","piece","isUpperCase","toLowerCase","join","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","ch","bigWordCharTest","makeKeyRange","start","size","push","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","line","firstLine","lastLine","isLowerCase","k","isMatchableSymbol","indexOf","isNumber","isWhiteSpaceString","inArray","arr","options","defaultValue","aliases","callback","Error","value","cfg","option","scope","local","createCircularJumpList","pointer","head","tail","buffer","Array","add","oldCur","newCur","current","curMark","useNextSlot","cursor","trashMark","clear","setBookmark","markPos","find","cursorEqual","move","offset","mark","inc","cachedCursor","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","prototype","exitMacroRecordMode","macroModeState","vimGlobalState","enterMacroRecordMode","registerName","register","registerController","getRegister","openDialog","bottom","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","marks","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","lastCharacterSearch","increment","selectedCharacter","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","getVimGlobalState","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","logKey","handleEsc","exitVisualMode","exitInsertMode","doKeyToKey","match","exec","substring","index","handleKeyInsertMode","keyBuffer","debug","keysAreChars","commandDispatcher","matchCommand","slice","thisMatch","window","clearTimeout","setTimeout","selections","listSelections","here","replaceRange","pop","handleKeyNonInsertMode","keysMatcher","pushRepeatDigit","operation","curOp","isVimOp","processCommand","e","console","handleEx","input","defineMotion","defineAction","defineOperator","mapCommand","_mapCommand","defineRegister","prefixRepeat","motionRepeat","n","getRepeat","repeat","parseInt","reason","Register","text","insertModeChanges","searchQueries","setText","pushText","pushInsertModeChanges","pushSearchQuery","query","toString","registers","unnamedRegister","isValidRegister","reg","writeText","shiftNumericRegisters_","append","historyBuffer","iterator","initialPrefix","nextMatch","up","dir","element","j","pushInput","splice","reset","matches","commandMatches","full","partial","bestMatch","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","ignoreCase","smartCase","updateSearchQuery","showConfirm","onPromptClose","scrollTo","left","top","logSearchQuery","onPromptKeyUp","close","keyName","target","selectionEnd","selectionStart","Math","min","parsedQuery","scrollIntoView","findNext","clearSearchHighlight","onPromptKeyDown","e_stop","focus","shift","showPrompt","onClose","desc","searchPromptDesc","onKeyUp","onKeyDown","word","expandWordUnderCursor","isKeyword","getLine","end","escapeRegex","exArgs","origHead","copyCursor","clipCursorToContent","origAnchor","anchor","oldHead","oldAnchor","newHead","newAnchor","noRepeat","motionResult","motions","recordJumpPosition","Infinity","updateCmSelection","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","ranges","lineLength","tmp","expandSelectionToLine","clipToLine","exclusive","setSelections","primary","operatorMoveTo","operators","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","range","floor","moveToBottomLine","expandToLine","_cm","cur","isReversed","highlightSearchMatches","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","cursorIsBetween","moveByCharacters","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","moveToStartOfLine","charCoords","res","findPosV","hitSide","lastCharCoords","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","findSymbol","retval","clipPos","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","lineText","symbol","style","getTokenTypeAt","matched","findMatchingBracket","to","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","mirroredPairs","selfPaired","selectCompanionObject","findBeginningAndEnd","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fn","fillArray","times","change","args","finalHead","inVisualBlock","getRange","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","commands","newlineAndIndent","getSelection","replacement","replaceSelections","delete","includeLineBreak","indent","startLine","endLine","indentLine","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","classList","remove","JSON","stringify","max","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineFn","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","idx","lastSelectionCurEnd","selectedArea","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","lastCh","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","markName","replaceWith","replaceTo","replaceWithStr","incrementNumberToken","lineStr","re","numberStr","token","number","from","repeatLastEdit","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","getOffset","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","lineHead","atAnchor","atHead","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","setSelection","updateFakeCursor","headOffset","anchorOffset","right","getHead","moveHead","selection","lines","firstNonWS","search","_forward","noSymbol","wordStart","symbolToMode","m","M","findSymbolModes","bracket","isComplete","nextCh","symb","depth","reverseSymb","section","init","curMoveThrough","comment","found","method","preprocess","lineCount","curCh","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","words","eodCh","shortCircuit","firstWord","lastWord","charIdxInLine","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","bracketRegexp","openSym","curChar","scanForBracket","bracketRegex","chars","len","firstIndex","SearchState","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","searchState_","dialog","template","shortText","selectValueOnOpen","prompt","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","escapeNextChar","translateRegex","specials","unescape","out","specialComesNext","charUnescapes","translateRegexReplace","unescapes","unescapeRegexReplace","stream","StringStream","output","eol","peek","matcher","parseQuery","lastSearchRegister","RegExp","regexPart","forceIgnoreCase","flagsPart","regexp","openNotification","duration","alert","makePrompt","raw","regexEqual","r1","r2","props","rawQuery","source","matchSol","sol","skipToEnd","backUp","searchState","removeOverlay","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","occludeToleranceTop","occludeToleranceBottom","bottomY","history","doc","done","event","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","result","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","mapping","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","reverse","unique","pattern","parseArgs","eatSpace","opts","decimal","hex","octal","substr","err","lineStart","radix","numPart","textPart","matchPart","compareFn","a","b","anum","bnum","comparePatternFn","textOld","global","matchedLines","content","nextCommand","substitute","replacePart","trailing","count","confirm","startPos","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","searchCursor","exMode","lastPos","replaceAll","newText","_value","savedCallback","detach","insertModeChangeRegister","lastChange","selLength","logInsertModeChange","extra","fallthrough","imc","repeatInsertModeChanges","changeObj","maybeReset","handleExternalSelection","markText","className","somethingSelected","onKeyFound","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\nconst { logger } = require('inkdrop')\nconst { clipboard } = require('electron')\n\nmodule.exports = function (CodeMirror) {\n  var defaultKeymap = []\n  var _defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal' },\n    //\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    {\n      keys: '<Ins>',\n      type: 'action',\n      action: 'toggleOverwrite',\n      context: 'insert'\n    },\n    // Motions\n    {\n      keys: 'H',\n      type: 'motion',\n      motion: 'moveToTopLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'M',\n      type: 'motion',\n      motion: 'moveToMiddleLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'L',\n      type: 'motion',\n      motion: 'moveToBottomLine',\n      motionArgs: { linewise: true, toJumplist: true }\n    },\n    {\n      keys: 'h',\n      type: 'motion',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 'l',\n      type: 'motion',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: 'j',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: 'k',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: false, linewise: true }\n    },\n    {\n      keys: 'gj',\n      type: 'motion',\n      motion: 'moveByDisplayLines',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: 'gk',\n      type: 'motion',\n      motion: 'moveByDisplayLines',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 'w',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: false }\n    },\n    {\n      keys: 'W',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: false, bigWord: true }\n    },\n    {\n      keys: 'e',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: true, wordEnd: true, inclusive: true }\n    },\n    {\n      keys: 'E',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: {\n        forward: true,\n        wordEnd: true,\n        bigWord: true,\n        inclusive: true\n      }\n    },\n    {\n      keys: 'b',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false }\n    },\n    {\n      keys: 'B',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false, bigWord: true }\n    },\n    {\n      keys: 'ge',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: true, inclusive: true }\n    },\n    {\n      keys: 'gE',\n      type: 'motion',\n      motion: 'moveByWords',\n      motionArgs: {\n        forward: false,\n        wordEnd: true,\n        bigWord: true,\n        inclusive: true\n      }\n    },\n    {\n      keys: '{',\n      type: 'motion',\n      motion: 'moveByParagraph',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    {\n      keys: '}',\n      type: 'motion',\n      motion: 'moveByParagraph',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: '<C-f>',\n      type: 'motion',\n      motion: 'moveByPage',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: '<C-b>',\n      type: 'motion',\n      motion: 'moveByPage',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: '<C-d>',\n      type: 'motion',\n      motion: 'moveByScroll',\n      motionArgs: { forward: true, explicitRepeat: true }\n    },\n    {\n      keys: '<C-u>',\n      type: 'motion',\n      motion: 'moveByScroll',\n      motionArgs: { forward: false, explicitRepeat: true }\n    },\n    {\n      keys: 'gg',\n      type: 'motion',\n      motion: 'moveToLineOrEdgeOfDocument',\n      motionArgs: {\n        forward: false,\n        explicitRepeat: true,\n        linewise: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'G',\n      type: 'motion',\n      motion: 'moveToLineOrEdgeOfDocument',\n      motionArgs: {\n        forward: true,\n        explicitRepeat: true,\n        linewise: true,\n        toJumplist: true\n      }\n    },\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    {\n      keys: '+',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, toFirstChar: true }\n    },\n    {\n      keys: '-',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: false, toFirstChar: true }\n    },\n    {\n      keys: '_',\n      type: 'motion',\n      motion: 'moveByLines',\n      motionArgs: { forward: true, toFirstChar: true, repeatOffset: -1 }\n    },\n    {\n      keys: '$',\n      type: 'motion',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true }\n    },\n    {\n      keys: '%',\n      type: 'motion',\n      motion: 'moveToMatchedSymbol',\n      motionArgs: { inclusive: true, toJumplist: true }\n    },\n    {\n      keys: 'f<character>',\n      type: 'motion',\n      motion: 'moveToCharacter',\n      motionArgs: { forward: true, inclusive: true }\n    },\n    {\n      keys: 'F<character>',\n      type: 'motion',\n      motion: 'moveToCharacter',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: 't<character>',\n      type: 'motion',\n      motion: 'moveTillCharacter',\n      motionArgs: { forward: true, inclusive: true }\n    },\n    {\n      keys: 'T<character>',\n      type: 'motion',\n      motion: 'moveTillCharacter',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: ';',\n      type: 'motion',\n      motion: 'repeatLastCharacterSearch',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: ',',\n      type: 'motion',\n      motion: 'repeatLastCharacterSearch',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: \"'<character>\",\n      type: 'motion',\n      motion: 'goToMark',\n      motionArgs: { toJumplist: true, linewise: true }\n    },\n    {\n      keys: '`<character>',\n      type: 'motion',\n      motion: 'goToMark',\n      motionArgs: { toJumplist: true }\n    },\n    {\n      keys: ']`',\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: true }\n    },\n    {\n      keys: '[`',\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: false }\n    },\n    {\n      keys: \"]'\",\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: \"['\",\n      type: 'motion',\n      motion: 'jumpToMark',\n      motionArgs: { forward: false, linewise: true }\n    },\n    // the next two aren't motions but must come before more general motion declarations\n    {\n      keys: ']p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: true, isEdit: true, matchIndent: true }\n    },\n    {\n      keys: '[p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: false, isEdit: true, matchIndent: true }\n    },\n    {\n      keys: ']<character>',\n      type: 'motion',\n      motion: 'moveToSymbol',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: '[<character>',\n      type: 'motion',\n      motion: 'moveToSymbol',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    { keys: '|', type: 'motion', motion: 'moveToColumn' },\n    {\n      keys: 'o',\n      type: 'motion',\n      motion: 'moveToOtherHighlightedEnd',\n      context: 'visual'\n    },\n    {\n      keys: 'O',\n      type: 'motion',\n      motion: 'moveToOtherHighlightedEnd',\n      motionArgs: { sameLine: true },\n      context: 'visual'\n    },\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    {\n      keys: '>',\n      type: 'operator',\n      operator: 'indent',\n      operatorArgs: { indentRight: true }\n    },\n    {\n      keys: '<',\n      type: 'operator',\n      operator: 'indent',\n      operatorArgs: { indentRight: false }\n    },\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    {\n      keys: 'gu',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: true },\n      isEdit: true\n    },\n    {\n      keys: 'gU',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: false },\n      isEdit: true\n    },\n    {\n      keys: 'n',\n      type: 'motion',\n      motion: 'findNext',\n      motionArgs: { forward: true, toJumplist: true }\n    },\n    {\n      keys: 'N',\n      type: 'motion',\n      motion: 'findNext',\n      motionArgs: { forward: false, toJumplist: true }\n    },\n    // Operator-Motion dual commands\n    {\n      keys: 'x',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true },\n      operatorMotionArgs: { visualLine: false }\n    },\n    {\n      keys: 'X',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: false },\n      operatorMotionArgs: { visualLine: true }\n    },\n    {\n      keys: 'D',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true },\n      context: 'normal'\n    },\n    {\n      keys: 'D',\n      type: 'operator',\n      operator: 'delete',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: 'Y',\n      type: 'operatorMotion',\n      operator: 'yank',\n      motion: 'expandToLine',\n      motionArgs: { linewise: true },\n      context: 'normal'\n    },\n    {\n      keys: 'Y',\n      type: 'operator',\n      operator: 'yank',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: 'C',\n      type: 'operatorMotion',\n      operator: 'change',\n      motion: 'moveToEol',\n      motionArgs: { inclusive: true },\n      context: 'normal'\n    },\n    {\n      keys: 'C',\n      type: 'operator',\n      operator: 'change',\n      operatorArgs: { linewise: true },\n      context: 'visual'\n    },\n    {\n      keys: '~',\n      type: 'operatorMotion',\n      operator: 'changeCase',\n      motion: 'moveByCharacters',\n      motionArgs: { forward: true },\n      operatorArgs: { shouldMoveCursor: true },\n      context: 'normal'\n    },\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual' },\n    {\n      keys: '<C-w>',\n      type: 'operatorMotion',\n      operator: 'delete',\n      motion: 'moveByWords',\n      motionArgs: { forward: false, wordEnd: false },\n      context: 'insert'\n    },\n    // Actions\n    {\n      keys: '<C-i>',\n      type: 'action',\n      action: 'jumpListWalk',\n      actionArgs: { forward: true }\n    },\n    {\n      keys: '<C-o>',\n      type: 'action',\n      action: 'jumpListWalk',\n      actionArgs: { forward: false }\n    },\n    {\n      keys: '<C-e>',\n      type: 'action',\n      action: 'scroll',\n      actionArgs: { forward: true, linewise: true }\n    },\n    {\n      keys: '<C-y>',\n      type: 'action',\n      action: 'scroll',\n      actionArgs: { forward: false, linewise: true }\n    },\n    {\n      keys: 'a',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'charAfter' },\n      context: 'normal'\n    },\n    {\n      keys: 'A',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'eol' },\n      context: 'normal'\n    },\n    {\n      keys: 'A',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'endOfSelectedArea' },\n      context: 'visual'\n    },\n    {\n      keys: 'i',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'inplace' },\n      context: 'normal'\n    },\n    {\n      keys: 'I',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'firstNonBlank' },\n      context: 'normal'\n    },\n    {\n      keys: 'I',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { insertAt: 'startOfSelectedArea' },\n      context: 'visual'\n    },\n    {\n      keys: 'o',\n      type: 'action',\n      action: 'newLineAndEnterInsertMode',\n      isEdit: true,\n      interlaceInsertRepeat: true,\n      actionArgs: { after: true },\n      context: 'normal'\n    },\n    {\n      keys: 'O',\n      type: 'action',\n      action: 'newLineAndEnterInsertMode',\n      isEdit: true,\n      interlaceInsertRepeat: true,\n      actionArgs: { after: false },\n      context: 'normal'\n    },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    {\n      keys: 'V',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { linewise: true }\n    },\n    {\n      keys: '<C-v>',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { blockwise: true }\n    },\n    {\n      keys: '<C-q>',\n      type: 'action',\n      action: 'toggleVisualMode',\n      actionArgs: { blockwise: true }\n    },\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    {\n      keys: 'p',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: true, isEdit: true }\n    },\n    {\n      keys: 'P',\n      type: 'action',\n      action: 'paste',\n      isEdit: true,\n      actionArgs: { after: false, isEdit: true }\n    },\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    {\n      keys: 'R',\n      type: 'action',\n      action: 'enterInsertMode',\n      isEdit: true,\n      actionArgs: { replace: true }\n    },\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    {\n      keys: 'u',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: true },\n      context: 'visual',\n      isEdit: true\n    },\n    {\n      keys: 'U',\n      type: 'operator',\n      operator: 'changeCase',\n      operatorArgs: { toLower: false },\n      context: 'visual',\n      isEdit: true\n    },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    {\n      keys: 'zz',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'center' }\n    },\n    {\n      keys: 'z.',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'center' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    {\n      keys: 'zt',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'top' }\n    },\n    {\n      keys: 'z<CR>',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'top' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    {\n      keys: 'z-',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'bottom' }\n    },\n    {\n      keys: 'zb',\n      type: 'action',\n      action: 'scrollToCursor',\n      actionArgs: { position: 'bottom' },\n      motion: 'moveToFirstNonWhiteSpaceCharacter'\n    },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    {\n      keys: '<C-a>',\n      type: 'action',\n      action: 'incrementNumberToken',\n      isEdit: true,\n      actionArgs: { increase: true, backtrack: false }\n    },\n    {\n      keys: '<C-x>',\n      type: 'action',\n      action: 'incrementNumberToken',\n      isEdit: true,\n      actionArgs: { increase: false, backtrack: false }\n    },\n    {\n      keys: '<C-t>',\n      type: 'action',\n      action: 'indent',\n      actionArgs: { indentRight: true },\n      context: 'insert'\n    },\n    {\n      keys: '<C-d>',\n      type: 'action',\n      action: 'indent',\n      actionArgs: { indentRight: false },\n      context: 'insert'\n    },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    {\n      keys: 'i<character>',\n      type: 'motion',\n      motion: 'textObjectManipulation',\n      motionArgs: { textObjectInner: true }\n    },\n    // Search\n    {\n      keys: '/',\n      type: 'search',\n      searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }\n    },\n    {\n      keys: '?',\n      type: 'search',\n      searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }\n    },\n    {\n      keys: '*',\n      type: 'search',\n      searchArgs: {\n        forward: true,\n        querySrc: 'wordUnderCursor',\n        wholeWordOnly: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: '#',\n      type: 'search',\n      searchArgs: {\n        forward: false,\n        querySrc: 'wordUnderCursor',\n        wholeWordOnly: true,\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'g*',\n      type: 'search',\n      searchArgs: {\n        forward: true,\n        querySrc: 'wordUnderCursor',\n        toJumplist: true\n      }\n    },\n    {\n      keys: 'g#',\n      type: 'search',\n      searchArgs: {\n        forward: false,\n        querySrc: 'wordUnderCursor',\n        toJumplist: true\n      }\n    },\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ]\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ]\n\n  var Pos = CodeMirror.Pos\n\n  var Vim = function () {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true)\n      cm.setOption('showCursorWhenSelecting', false)\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      cm.on('cursorActivity', onCursorActivity)\n      maybeInitVimState(cm)\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm))\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false)\n      cm.off('cursorActivity', onCursorActivity)\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm))\n      cm.state.vim = null\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), 'cm-fat-cursor')\n      }\n\n      if (!next || next.attach != attachVimMap) {\n        leaveVimMode(cm)\n      }\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), 'cm-fat-cursor')\n      }\n\n      if (!prev || prev.attach != attachVimMap) {\n        enterVimMode(cm)\n      }\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function (cm, val, prev) {\n      if (val && cm.getOption('keyMap') != 'vim') {\n        cm.setOption('keyMap', 'vim')\n      } else if (\n        !val &&\n        prev != CodeMirror.Init &&\n        /^vim/.test(cm.getOption('keyMap'))\n      ) {\n        cm.setOption('keyMap', 'default')\n      }\n    })\n\n    function cmKey(key, cm) {\n      if (!cm) {\n        return undefined\n      }\n      if (this[key]) {\n        return this[key]\n      }\n      var vimKey = cmKeyToVimKey(key)\n      if (!vimKey) {\n        return false\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey)\n      if (typeof cmd === 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey)\n      }\n      return cmd\n    }\n\n    var modifiers = { Shift: 'S', Ctrl: 'C', Alt: 'A', Cmd: 'D', Mod: 'A' }\n    var specialKeys = {\n      Enter: 'CR',\n      Backspace: 'BS',\n      Delete: 'Del',\n      Insert: 'Ins'\n    }\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == \"'\") {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1)\n      }\n      var pieces = key.split(/-(?!$)/)\n      var lastPiece = pieces[pieces.length - 1]\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false\n      } else if (\n        pieces.length == 2 &&\n        pieces[0] == 'Shift' &&\n        lastPiece.length == 1\n      ) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false\n      }\n      var hasCharacter = false\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i]\n        if (piece in modifiers) {\n          pieces[i] = modifiers[piece]\n        } else {\n          hasCharacter = true\n        }\n        if (piece in specialKeys) {\n          pieces[i] = specialKeys[piece]\n        }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase()\n      }\n      return '<' + pieces.join('-') + '>'\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function () {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1))\n            actions.enterInsertMode(cm, {}, vim)\n          }\n        }\n      }\n      return vim.onPasteFn\n    }\n\n    var numberRegex = /[\\d]/\n    var wordCharTest = [\n        CodeMirror.isWordChar,\n        function (ch) {\n          return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch)\n        }\n      ],\n      bigWordCharTest = [\n        function (ch) {\n          return /\\S/.test(ch)\n        }\n      ]\n    function makeKeyRange(start, size) {\n      var keys = []\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i))\n      }\n      return keys\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26)\n    var lowerCaseAlphabet = makeKeyRange(97, 26)\n    var numbers = makeKeyRange(48, 10)\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, [\n      '<',\n      '>'\n    ])\n    var validRegisters = [].concat(\n      upperCaseAlphabet,\n      lowerCaseAlphabet,\n      numbers,\n      ['-', '\"', '.', ':', '/']\n    )\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine()\n    }\n    function isLowerCase(k) {\n      return /^[a-z]$/.test(k)\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1\n    }\n    function isNumber(k) {\n      return numberRegex.test(k)\n    }\n    function isUpperCase(k) {\n      return /^[A-Z]$/.test(k)\n    }\n    function isWhiteSpaceString(k) {\n      return /^\\s*$/.test(k)\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true\n        }\n      }\n      return false\n    }\n\n    var options = {}\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided')\n      }\n      if (!type) {\n        type = 'string'\n      }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      }\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name]\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue)\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value)\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined)\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm)\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = { value: value }\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm)\n        if (scope !== 'global' && local !== undefined) {\n          return local\n        }\n        if (scope !== 'local') {\n          return option.callback()\n        }\n      } else {\n        var local = scope !== 'global' && cm && cm.state.vim.options[name]\n        return (local || (scope !== 'local' && option) || {}).value\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function (name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode')\n        return mode == 'null' ? '' : mode\n      } else {\n        var mode = name == '' ? 'null' : name\n        cm.setOption('mode', mode)\n      }\n    })\n\n    var createCircularJumpList = function () {\n      var size = 100\n      var pointer = -1\n      var head = 0\n      var tail = 0\n      var buffer = new Array(size)\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size\n        var curMark = buffer[current]\n        function useNextSlot(cursor) {\n          var next = ++pointer % size\n          var trashMark = buffer[next]\n          if (trashMark) {\n            trashMark.clear()\n          }\n          buffer[next] = cm.setBookmark(cursor)\n        }\n        if (curMark) {\n          var markPos = curMark.find()\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur)\n          }\n        } else {\n          useNextSlot(oldCur)\n        }\n        useNextSlot(newCur)\n        head = pointer\n        tail = pointer - size + 1\n        if (tail < 0) {\n          tail = 0\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset\n        if (pointer > head) {\n          pointer = head\n        } else if (pointer < tail) {\n          pointer = tail\n        }\n        var mark = buffer[(size + pointer) % size]\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1\n          var newCur\n          var oldCur = cm.getCursor()\n          do {\n            pointer += inc\n            mark = buffer[(size + pointer) % size]\n            // skip marks that are the same as current position\n            if (\n              mark &&\n              (newCur = mark.find()) &&\n              !cursorEqual(oldCur, newCur)\n            ) {\n              break\n            }\n          } while (pointer < head && pointer > tail)\n        }\n        return mark\n      }\n      return {\n        cachedCursor: undefined, // used for # and * jumps\n        add: add,\n        move: move\n      }\n    }\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function (c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        }\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      }\n    }\n\n    function MacroModeState() {\n      this.latestRegister = undefined\n      this.isPlaying = false\n      this.isRecording = false\n      this.replaySearchQueries = []\n      this.onRecordingDone = undefined\n      this.lastInsertModeChanges = createInsertModeChanges()\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function () {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone() // close dialog\n        }\n        macroModeState.onRecordingDone = undefined\n        macroModeState.isRecording = false\n      },\n      enterMacroRecordMode: function (cm, registerName) {\n        var register =\n          vimGlobalState.registerController.getRegister(registerName)\n        if (register) {\n          register.clear()\n          this.latestRegister = registerName\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n              '(recording)[' + registerName + ']',\n              null,\n              { bottom: true }\n            )\n          }\n          this.isRecording = true\n        }\n      }\n    }\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        }\n      }\n      return cm.state.vim\n    }\n    var vimGlobalState\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState(),\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {\n          increment: 0,\n          forward: true,\n          selectedCharacter: ''\n        },\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController: new HistoryController()\n      }\n      for (var optionName in options) {\n        var option = options[optionName]\n        option.value = option.defaultValue\n      }\n    }\n\n    var lastInsertModeKeyTimer\n    var vimApi = {\n      buildKeyMap: function () {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function () {\n        return vimGlobalState.registerController\n      },\n      resetVimGlobalState: resetVimGlobalState,\n      getVimGlobalState: function () {\n        return vimGlobalState\n      },\n      maybeInitVimState: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function (lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx)\n      },\n      unmap: function (lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx)\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function (name, prefix, func) {\n        if (!prefix) {\n          prefix = name\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error(\n            '(Vim.defineEx) \"' +\n              prefix +\n              '\" is not a prefix of \"' +\n              name +\n              '\", command not registered'\n          )\n        }\n        exCommands[name] = func\n        exCommandDispatcher.commandMap_[prefix] = {\n          name: name,\n          shortName: prefix,\n          type: 'api'\n        }\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin)\n        if (typeof command === 'function') {\n          return command()\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function (cm, key, origin) {\n        var vim = maybeInitVimState(cm)\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode()\n              clearInputState(cm)\n              return true\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key)\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm)\n            if (vim.visualMode) {\n              exitVisualMode(cm)\n            } else if (vim.insertMode) {\n              exitInsertMode(cm)\n            }\n            return true\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = /<\\w+-.+?>|<\\w+>|./.exec(keys)\n            key = match[0]\n            keys = keys.substring(match.index + key.length)\n            CodeMirror.Vim.handleKey(cm, key, 'mapping')\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) {\n            return true\n          }\n\n          var keys = (vim.inputState.keyBuffer = vim.inputState.keyBuffer + key)\n          logger.debug('keyBuffer:', keys)\n          var keysAreChars = key.length == 1\n          var match = commandDispatcher.matchCommand(\n            keys,\n            defaultKeymap,\n            vim.inputState,\n            'insert'\n          )\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type !== 'full') {\n            var keys = (vim.inputState.keyBuffer = keys.slice(1))\n            var thisMatch = commandDispatcher.matchCommand(\n              keys,\n              defaultKeymap,\n              vim.inputState,\n              'insert'\n            )\n            if (thisMatch.type !== 'none') {\n              match = thisMatch\n            }\n          }\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            if (lastInsertModeKeyTimer) {\n              window.clearTimeout(lastInsertModeKeyTimer)\n            }\n            lastInsertModeKeyTimer = window.setTimeout(() => {\n              if (vim.insertMode && vim.inputState.keyBuffer) {\n                clearInputState(cm)\n              }\n            }, getOption('insertModeEscKeysTimeout'))\n            return !keysAreChars\n          }\n\n          if (lastInsertModeKeyTimer) {\n            window.clearTimeout(lastInsertModeKeyTimer)\n          }\n          if (keysAreChars) {\n            var selections = cm.listSelections()\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head\n              cm.replaceRange(\n                '',\n                offsetCursor(here, 0, -(keys.length - 1)),\n                here,\n                '+input'\n              )\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop()\n          }\n          clearInputState(cm)\n          return match.command\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) {\n            return true\n          }\n\n          var keys = (vim.inputState.keyBuffer = vim.inputState.keyBuffer + key)\n          if (/^[1-9]\\d*$/.test(keys)) {\n            return true\n          }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (!keysMatcher) {\n            clearInputState(cm)\n            return false\n          }\n          var context = vim.visualMode ? 'visual' : 'normal'\n          var match = commandDispatcher.matchCommand(\n            keysMatcher[2] || keysMatcher[1],\n            defaultKeymap,\n            vim.inputState,\n            context\n          )\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            return true\n          }\n\n          vim.inputState.keyBuffer = ''\n          keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (keysMatcher[1] && keysMatcher[1] !== '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1])\n          }\n          return match.command\n        }\n\n        var command\n        if (vim.insertMode) {\n          command = handleKeyInsertMode()\n        } else {\n          command = handleKeyNonInsertMode()\n        }\n\n        logger.debug(\n          'keyBuffer::::',\n          command,\n          vim.inputState.keyBuffer,\n          vim.inputState.operator,\n          vim.inputState.operatorArgs\n        )\n\n        if (command === false) {\n          return undefined\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function () {\n            return true\n          }\n        } else {\n          return function () {\n            return cm.operation(function () {\n              cm.curOp.isVimOp = true\n              try {\n                if (command.type === 'keyToKey') {\n                  doKeyToKey(command.toKeys)\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command)\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined\n                maybeInitVimState(cm)\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e)\n                }\n                throw e\n              }\n              return true\n            })\n          }\n        }\n      },\n      handleEx: function (cm, input) {\n        exCommandDispatcher.processCommand(cm, input)\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode,\n      clearInputState: clearInputState,\n\n      cmKeyToVimKey: cmKeyToVimKey\n    }\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = []\n      this.motionRepeat = []\n\n      this.operator = null\n      this.operatorArgs = null\n      this.motion = null\n      this.motionArgs = null\n      this.keyBuffer = [] // For matching multi-key commands.\n      this.registerName = null // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function (n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n)\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n)\n      }\n    }\n    InputState.prototype.getRepeat = function () {\n      var repeat = 0\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10)\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10)\n        }\n      }\n      return repeat\n    }\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState()\n      CodeMirror.signal(cm, 'vim-command-done', reason)\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear()\n      this.keyBuffer = [text || '']\n      this.insertModeChanges = []\n      this.searchQueries = []\n      this.linewise = !!linewise\n      this.blockwise = !!blockwise\n    }\n    Register.prototype = {\n      setText: function (text, linewise, blockwise) {\n        this.keyBuffer = [text || '']\n        this.linewise = !!linewise\n        this.blockwise = !!blockwise\n      },\n      pushText: function (text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n')\n          }\n          this.linewise = true\n        }\n        this.keyBuffer.push(text)\n      },\n      pushInsertModeChanges: function (changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes))\n      },\n      pushSearchQuery: function (query) {\n        this.searchQueries.push(query)\n      },\n      clear: function () {\n        this.keyBuffer = []\n        this.insertModeChanges = []\n        this.searchQueries = []\n        this.linewise = false\n      },\n      toString: function () {\n        return this.keyBuffer.join('')\n      }\n    }\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character')\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name)\n      }\n      registers[name] = register\n      validRegisters.push(name)\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers\n      this.unnamedRegister = registers['\"'] = new Register()\n      registers['.'] = new Register()\n      registers[':'] = new Register()\n      registers['/'] = new Register()\n    }\n    RegisterController.prototype = {\n      pushText: function (registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n') {\n          text += '\\n'\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName)\n          ? this.getRegister(registerName)\n          : null\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              const reg = new Register(text, linewise, blockwise)\n              logger.debug('yanked:', reg)\n              this.registers['0'] = reg\n              clipboard.writeText(reg.keyBuffer[0])\n              break\n            case 'delete':\n              clipboard.writeText(text)\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise)\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_()\n                this.registers['1'] = new Register(text, linewise)\n              }\n              break\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise)\n          return\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName)\n        if (append) {\n          register.pushText(text, linewise)\n        } else {\n          register.setText(text, linewise, blockwise)\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise)\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function (name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister\n        }\n        name = name.toLowerCase()\n        if (!this.registers[name]) {\n          this.registers[name] = new Register()\n        }\n        return this.registers[name]\n      },\n      isValidRegister: function (name) {\n        return name && inArray(name, validRegisters)\n      },\n      shiftNumericRegisters_: function () {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1))\n        }\n      }\n    }\n    function HistoryController() {\n      this.historyBuffer = []\n      this.iterator = 0\n      this.initialPrefix = null\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer\n        var dir = up ? -1 : 1\n        if (this.initialPrefix === null) this.initialPrefix = input\n        for (\n          var i = this.iterator + dir;\n          up ? i >= 0 : i < historyBuffer.length;\n          i += dir\n        ) {\n          var element = historyBuffer[i]\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i\n              return element\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length\n          return this.initialPrefix\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0) return input\n      },\n      pushInput: function (input) {\n        var index = this.historyBuffer.indexOf(input)\n        if (index > -1) this.historyBuffer.splice(index, 1)\n        if (input.length) this.historyBuffer.push(input)\n      },\n      reset: function () {\n        this.initialPrefix = null\n        this.iterator = this.historyBuffer.length\n      }\n    }\n    var commandDispatcher = {\n      matchCommand: function (keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState)\n        if (!matches.full && !matches.partial) {\n          return { type: 'none' }\n        } else if (!matches.full && matches.partial) {\n          return { type: 'partial' }\n        }\n\n        var bestMatch\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i]\n          if (!bestMatch) {\n            bestMatch = match\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys)\n          if (!character) return { type: 'none' }\n          inputState.selectedCharacter = character\n        }\n        return { type: 'full', command: bestMatch }\n      },\n      processCommand: function (cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command)\n            break\n          case 'operator':\n            this.processOperator(cm, vim, command)\n            break\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command)\n            break\n          case 'action':\n            this.processAction(cm, vim, command)\n            break\n          case 'search':\n            this.processSearch(cm, vim, command)\n            break\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command)\n            break\n          default:\n            break\n        }\n      },\n      processMotion: function (cm, vim, command) {\n        vim.inputState.motion = command.motion\n        vim.inputState.motionArgs = copyArgs(command.motionArgs)\n        this.evalInput(cm, vim)\n      },\n      processOperator: function (cm, vim, command) {\n        var inputState = vim.inputState\n        if (inputState.operator) {\n          if (inputState.operator === command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine'\n            inputState.motionArgs = { linewise: true }\n            this.evalInput(cm, vim)\n            return\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm)\n          }\n        }\n        inputState.operator = command.operator\n        inputState.operatorArgs = copyArgs(command.operatorArgs)\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim)\n        }\n      },\n      processOperatorMotion: function (cm, vim, command) {\n        var visualMode = vim.visualMode\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs)\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true\n          }\n        }\n        this.processOperator(cm, vim, command)\n        if (!visualMode) {\n          this.processMotion(cm, vim, command)\n        }\n      },\n      processAction: function (cm, vim, command) {\n        var inputState = vim.inputState\n        var repeat = inputState.getRepeat()\n        var repeatIsExplicit = !!repeat\n        var actionArgs = copyArgs(command.actionArgs) || {}\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command)\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command)\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim)\n        }\n        actionArgs.repeat = repeat || 1\n        actionArgs.repeatIsExplicit = repeatIsExplicit\n        actionArgs.registerName = inputState.registerName\n        clearInputState(cm)\n        vim.lastMotion = null\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command)\n        }\n        actions[command.action](cm, actionArgs, vim)\n      },\n      processSearch: function (cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return\n        }\n        var forward = command.searchArgs.forward\n        var wholeWordOnly = command.searchArgs.wholeWordOnly\n        getSearchState(cm).setReversed(!forward)\n        var promptPrefix = forward ? '/' : '?'\n        var originalQuery = getSearchState(cm).getQuery()\n        var originalScrollPos = cm.getScrollInfo()\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query)\n          vimGlobalState.searchHistoryController.reset()\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase)\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query)\n            clearInputState(cm)\n            return\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: {\n              forward: true,\n              toJumplist: command.searchArgs.toJumplist\n            }\n          })\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */)\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query)\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e),\n            up,\n            offset\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            query =\n              vimGlobalState.searchHistoryController.nextMatch(query, up) || ''\n            close(query)\n            if (offset && e.target)\n              e.target.selectionEnd = e.target.selectionStart = Math.min(\n                offset,\n                e.target.value.length\n              )\n          } else {\n            if (\n              keyName != 'Left' &&\n              keyName != 'Right' &&\n              keyName != 'Ctrl' &&\n              keyName != 'Alt' &&\n              keyName != 'Shift'\n            ) {\n              vimGlobalState.searchHistoryController.reset()\n            }\n          }\n          var parsedQuery\n          try {\n            parsedQuery = updateSearchQuery(\n              cm,\n              query,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30)\n          } else {\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e)\n          if (\n            keyName == 'Esc' ||\n            keyName == 'Ctrl-C' ||\n            keyName == 'Ctrl-[' ||\n            (keyName == 'Backspace' && query == '')\n          ) {\n            vimGlobalState.searchHistoryController.pushInput(query)\n            vimGlobalState.searchHistoryController.reset()\n            updateSearchQuery(cm, originalQuery)\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e)\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift()\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            } else {\n              showPrompt(cm, {\n                onClose: onPromptClose,\n                prefix: promptPrefix,\n                desc: searchPromptDesc,\n                onKeyUp: onPromptKeyUp,\n                onKeyDown: onPromptKeyDown\n              })\n            }\n            break\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(\n              cm,\n              false /** inclusive */,\n              true /** forward */,\n              false /** bigWord */,\n              true /** noSymbol */\n            )\n            var isKeyword = true\n            if (!word) {\n              word = expandWordUnderCursor(\n                cm,\n                false /** inclusive */,\n                true /** forward */,\n                false /** bigWord */,\n                false /** noSymbol */\n              )\n              isKeyword = false\n            }\n            if (!word) {\n              return\n            }\n            var query = cm\n              .getLine(word.start.line)\n              .substring(word.start.ch, word.end.ch)\n            if (isKeyword && wholeWordOnly) {\n              query = '\\\\b' + query + '\\\\b'\n            } else {\n              query = escapeRegex(query)\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor()\n            cm.setCursor(word.start)\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            break\n        }\n      },\n      processEx: function (cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input)\n          vimGlobalState.exCommandHistoryController.reset()\n          exCommandDispatcher.processCommand(cm, input)\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e),\n            up,\n            offset\n          if (\n            keyName === 'Esc' ||\n            keyName === 'Ctrl-C' ||\n            keyName === 'Ctrl-[' ||\n            (keyName === 'Backspace' && input === '')\n          ) {\n            vimGlobalState.exCommandHistoryController.pushInput(input)\n            vimGlobalState.exCommandHistoryController.reset()\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          }\n          if (keyName === 'Up' || keyName === 'Down') {\n            CodeMirror.e_stop(e)\n            up = keyName === 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            input =\n              vimGlobalState.exCommandHistoryController.nextMatch(input, up) ||\n              ''\n            close(input)\n            if (offset && e.target)\n              e.target.selectionEnd = e.target.selectionStart = Math.min(\n                offset,\n                e.target.value.length\n              )\n          } else if (keyName === 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          } else {\n            if (\n              keyName !== 'Left' &&\n              keyName !== 'Right' &&\n              keyName !== 'Ctrl' &&\n              keyName !== 'Alt' &&\n              keyName !== 'Shift'\n            ) {\n              vimGlobalState.exCommandHistoryController.reset()\n            }\n          }\n        }\n        if (command.type === 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input)\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              value: \"'<,'>\",\n              onKeyDown: onPromptKeyDown\n            })\n          } else {\n            showPrompt(cm, {\n              onClose: onPromptClose,\n              prefix: ':',\n              onKeyDown: onPromptKeyDown\n            })\n          }\n        }\n      },\n      evalInput: function (cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState\n        var motion = inputState.motion\n        var motionArgs = inputState.motionArgs || {}\n        var operator = inputState.operator\n        var operatorArgs = inputState.operatorArgs || {}\n        var registerName = inputState.registerName\n        var sel = vim.sel\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(\n          vim.visualMode\n            ? clipCursorToContent(cm, sel.head)\n            : cm.getCursor('head')\n        )\n        var origAnchor = copyCursor(\n          vim.visualMode\n            ? clipCursorToContent(cm, sel.anchor)\n            : cm.getCursor('anchor')\n        )\n        var oldHead = copyCursor(origHead)\n        var oldAnchor = copyCursor(origAnchor)\n        var newHead, newAnchor\n        var repeat\n        if (operator) {\n          this.recordLastEdit(vim, inputState)\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride\n        } else {\n          repeat = inputState.getRepeat()\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true\n        } else if (\n          motionArgs.noRepeat ||\n          (!motionArgs.explicitRepeat && repeat === 0)\n        ) {\n          repeat = 1\n          motionArgs.repeatIsExplicit = false\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n            inputState.selectedCharacter\n        }\n        motionArgs.repeat = repeat\n        clearInputState(cm)\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim)\n          vim.lastMotion = motions[motion]\n          if (!motionResult) {\n            return\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult)\n              delete jumpList.cachedCursor\n            } else {\n              recordJumpPosition(cm, origHead, motionResult)\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0]\n            newHead = motionResult[1]\n          } else {\n            newHead = motionResult\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead)\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock)\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true)\n            }\n            newAnchor = newAnchor || oldAnchor\n            sel.anchor = newAnchor\n            sel.head = newHead\n            updateCmSelection(cm)\n            updateMark(\n              cm,\n              vim,\n              '<',\n              cursorIsBefore(newAnchor, newHead) ? newAnchor : newHead\n            )\n            updateMark(\n              cm,\n              vim,\n              '>',\n              cursorIsBefore(newAnchor, newHead) ? newHead : newAnchor\n            )\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead)\n            cm.setCursor(newHead.line, newHead.ch)\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor\n            var lastSel = operatorArgs.lastSel\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line)\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch)\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(\n                oldAnchor.line + lineOffset,\n                oldAnchor.ch + chOffset\n              )\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset)\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            }\n            vim.visualMode = true\n            vim.visualLine = lastSel.visualLine\n            vim.visualBlock = lastSel.visualBlock\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            }\n            updateCmSelection(cm)\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            }\n          }\n          var curStart, curEnd, linewise, mode\n          var cmSel\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor)\n            curEnd = cursorMax(sel.head, sel.anchor)\n            linewise = vim.visualLine || operatorArgs.linewise\n            mode = vim.visualBlock ? 'block' : linewise ? 'line' : 'char'\n            cmSel = makeCmSelection(\n              cm,\n              {\n                anchor: curStart,\n                head: curEnd\n              },\n              mode\n            )\n            if (linewise) {\n              var ranges = cmSel.ranges\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line)\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0)\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor)\n            curEnd = copyCursor(newHead || oldHead)\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart\n              curStart = curEnd\n              curEnd = tmp\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd)\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd)\n            }\n            mode = 'char'\n            var exclusive = !motionArgs.inclusive || linewise\n            cmSel = makeCmSelection(\n              cm,\n              {\n                anchor: curStart,\n                head: curEnd\n              },\n              mode,\n              exclusive\n            )\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary)\n          vim.lastMotion = null\n          operatorArgs.repeat = repeat // For indent in visual mode.\n          operatorArgs.registerName = registerName\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise\n          var operatorMoveTo = operators[operator](\n            cm,\n            operatorArgs,\n            cmSel.ranges,\n            oldAnchor,\n            newHead\n          )\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null)\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo)\n          }\n        }\n      },\n      recordLastEdit: function (vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) {\n          return\n        }\n        vim.lastEditInputState = inputState\n        vim.lastEditActionCommand = actionCommand\n        macroModeState.lastInsertModeChanges.changes = []\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false\n      }\n    }\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat - 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToMiddleLine: function (cm) {\n        var range = getUserVisibleLines(cm)\n        var line = Math.floor((range.top + range.bottom) * 0.5)\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToBottomLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat + 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      expandToLine: function (_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity)\n      },\n      findNext: function (cm, _head, motionArgs) {\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        if (!query) {\n          return\n        }\n        var prev = !motionArgs.forward\n        // If search is initiated with ? instead of /, negate direction.\n        prev = state.isReversed() ? !prev : prev\n        highlightSearchMatches(cm, query)\n        return findNext(cm, prev /** prev */, query, motionArgs.repeat)\n      },\n      goToMark: function (cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter)\n        if (pos) {\n          return motionArgs.linewise\n            ? {\n                line: pos.line,\n                ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line))\n              }\n            : pos\n        }\n        return null\n      },\n      moveToOtherHighlightedEnd: function (cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ]\n        } else {\n          return [vim.sel.head, vim.sel.anchor]\n        }\n      },\n      jumpToMark: function (cm, head, motionArgs, vim) {\n        var best = head\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue\n            }\n            var mark = vim.marks[key].find()\n            var isWrongDirection = motionArgs.forward\n              ? cursorIsBefore(mark, cursor)\n              : cursorIsBefore(cursor, mark)\n\n            if (isWrongDirection) {\n              continue\n            }\n            if (motionArgs.linewise && mark.line == cursor.line) {\n              continue\n            }\n\n            var equal = cursorEqual(cursor, best)\n            var between = motionArgs.forward\n              ? cursorIsBetween(cursor, mark, best)\n              : cursorIsBetween(best, mark, cursor)\n\n            if (equal || between) {\n              best = mark\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(\n            best.line,\n            findFirstNonWhiteSpaceCharacter(cm.getLine(best.line))\n          )\n        }\n        return best\n      },\n      moveByCharacters: function (_cm, head, motionArgs) {\n        var cur = head\n        var repeat = motionArgs.repeat\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat\n        return Pos(cur.line, ch)\n      },\n      moveByLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        var endCh = cur.ch\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos\n            break\n          default:\n            vim.lastHPos = endCh\n        }\n        var repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0)\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat\n        var first = cm.firstLine()\n        var last = cm.lastLine()\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first) {\n          return this.moveToStartOfLine(cm, head, motionArgs, vim)\n        } else if (line > last && cur.line == last) {\n          return this.moveToEol(cm, head, motionArgs, vim)\n        }\n        if (motionArgs.toFirstChar) {\n          endCh = findFirstNonWhiteSpaceCharacter(cm.getLine(line))\n          vim.lastHPos = endCh\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh), 'div').left\n        return Pos(line, endCh)\n      },\n      moveByDisplayLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break\n          default:\n            vim.lastHSPos = cm.charCoords(cur, 'div').left\n        }\n        var repeat = motionArgs.repeat\n        var res = cm.findPosV(\n          cur,\n          motionArgs.forward ? repeat : -repeat,\n          'line',\n          vim.lastHSPos\n        )\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div')\n            var goalCoords = {\n              top: lastCharCoords.top + 8,\n              left: vim.lastHSPos\n            }\n            var res = cm.coordsChar(goalCoords, 'div')\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div')\n            resCoords.left = vim.lastHSPos\n            res = cm.coordsChar(resCoords, 'div')\n          }\n        }\n        vim.lastHPos = res.ch\n        return res\n      },\n      moveByPage: function (cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head\n        var repeat = motionArgs.repeat\n        return cm.findPosV(\n          curStart,\n          motionArgs.forward ? repeat : -repeat,\n          'page'\n        )\n      },\n      moveByParagraph: function (cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1\n        return findParagraph(cm, head, motionArgs.repeat, dir)\n      },\n      moveByScroll: function (cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo()\n        var curEnd = null\n        var repeat = motionArgs.repeat\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight())\n        }\n        var orig = cm.charCoords(head, 'local')\n        motionArgs.repeat = repeat\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim)\n        if (!curEnd) {\n          return null\n        }\n        var dest = cm.charCoords(curEnd, 'local')\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top)\n        return curEnd\n      },\n      moveByWords: function (cm, head, motionArgs) {\n        return moveToWord(\n          cm,\n          head,\n          motionArgs.repeat,\n          !!motionArgs.forward,\n          !!motionArgs.wordEnd,\n          !!motionArgs.bigWord\n        )\n      },\n      moveTillCharacter: function (cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat\n        var curEnd = moveToCharacter(\n          cm,\n          repeat,\n          motionArgs.forward,\n          motionArgs.selectedCharacter\n        )\n        var increment = motionArgs.forward ? -1 : 1\n        recordLastCharacterSearch(increment, motionArgs)\n        if (!curEnd) return null\n        curEnd.ch += increment\n        return curEnd\n      },\n      moveToCharacter: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        recordLastCharacterSearch(0, motionArgs)\n        logger.debug('moveToCharacter:', motionArgs)\n        return (\n          moveToCharacter(\n            cm,\n            repeat,\n            motionArgs.forward,\n            motionArgs.selectedCharacter\n          ) || head\n        )\n      },\n      moveToSymbol: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        return (\n          findSymbol(\n            cm,\n            repeat,\n            motionArgs.forward,\n            motionArgs.selectedCharacter\n          ) || head\n        )\n      },\n      moveToColumn: function (cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1\n        vim.lastHSPos = cm.charCoords(head, 'div').left\n        return moveToColumn(cm, repeat)\n      },\n      moveToEol: function (cm, head, motionArgs, vim) {\n        var cur = head\n        vim.lastHPos = Infinity\n        var retval = Pos(cur.line + motionArgs.repeat - 1, Infinity)\n        var end = cm.clipPos(retval)\n        end.ch--\n        vim.lastHSPos = cm.charCoords(end, 'div').left\n        return retval\n      },\n      moveToFirstNonWhiteSpaceCharacter: function (cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head\n        return Pos(\n          cursor.line,\n          findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line))\n        )\n      },\n      moveToMatchedSymbol: function (cm, head) {\n        var cursor = head\n        var line = cursor.line\n        var ch = cursor.ch\n        var lineText = cm.getLine(line)\n        var symbol\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch)\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1))\n            if (style !== 'string' && style !== 'comment') {\n              break\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch))\n          return matched.to\n        } else {\n          return cursor\n        }\n      },\n      moveToStartOfLine: function (_cm, head) {\n        return Pos(head.line, 0)\n      },\n      moveToLineOrEdgeOfDocument: function (cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine()\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber')\n        }\n        return Pos(\n          lineNum,\n          findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum))\n        )\n      },\n      textObjectManipulation: function (cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {\n          '(': ')',\n          ')': '(',\n          '{': '}',\n          '}': '{',\n          '[': ']',\n          ']': '['\n        }\n        var selfPaired = { \"'\": true, '\"': true }\n\n        var character = motionArgs.selectedCharacter\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '('\n        } else if (character == 'B') {\n          character = '{'\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner\n\n        var tmp\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive)\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive)\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(\n            cm,\n            inclusive,\n            true /** forward */,\n            true /** bigWord */\n          )\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(\n            cm,\n            inclusive,\n            true /** forward */,\n            false /** bigWord */\n          )\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive)\n          motionArgs.linewise = true\n          if (vim.visualMode) {\n            if (!vim.visualLine) {\n              vim.visualLine = true\n            }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs\n            if (operatorArgs) {\n              operatorArgs.linewise = true\n            }\n            tmp.end.line--\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end]\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end)\n        }\n      },\n\n      repeatLastCharacterSearch: function (cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch\n        var repeat = motionArgs.repeat\n        var forward = motionArgs.forward === lastSearch.forward\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1)\n        cm.moveH(-increment, 'char')\n        motionArgs.inclusive = !!forward\n        var curEnd = moveToCharacter(\n          cm,\n          repeat,\n          forward,\n          lastSearch.selectedCharacter\n        )\n        if (!curEnd) {\n          cm.moveH(increment, 'char')\n          return head\n        }\n        curEnd.ch += increment\n        return curEnd\n      }\n    }\n\n    function defineMotion(name, fn) {\n      motions[name] = fn\n    }\n\n    function fillArray(val, times) {\n      var arr = []\n      for (var i = 0; i < times; i++) {\n        arr.push(val)\n      }\n      return arr\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n     * match the input selection.\n     */\n    var operators = {\n      change: function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock =\n          vim.visualBlock\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          text = cm.getRange(anchor, head)\n          var lastState = vim.lastEditInputState || {}\n          if (lastState.motion == 'moveByWords' && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = /\\s+$/.exec(text)\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, -match[0].length)\n              text = text.slice(0, -match[0].length)\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE)\n          var wasLastLine = cm.firstLine() == cm.lastLine()\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head)\n          } else {\n            cm.replaceRange('', anchor, head)\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd)\n              CodeMirror.commands.newlineAndIndent(cm)\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE\n          }\n          finalHead = anchor\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor)\n        }\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'change',\n          text,\n          args.linewise,\n          ranges.length > 1\n        )\n        actions.enterInsertMode(cm, { head: finalHead }, cm.state.vim)\n      },\n      // delete is a javascript keyword.\n      delete: function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          if (\n            args.linewise &&\n            head.line != cm.firstLine() &&\n            anchor.line == cm.lastLine() &&\n            anchor.line == head.line - 1\n          ) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1))\n            }\n          }\n          text = cm.getRange(anchor, head)\n          cm.replaceRange('', anchor, head)\n          finalHead = anchor\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor)\n          }\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = ranges[0].anchor\n        }\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'delete',\n          text,\n          args.linewise,\n          vim.visualBlock\n        )\n        var includeLineBreak = vim.insertMode\n        return clipCursorToContent(cm, finalHead, includeLineBreak)\n      },\n      indent: function (cm, args, ranges) {\n        var vim = cm.state.vim\n        var startLine = ranges[0].anchor.line\n        var endLine = vim.visualBlock\n          ? ranges[ranges.length - 1].anchor.line\n          : ranges[0].head.line\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = vim.visualMode ? args.repeat : 1\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight)\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor)\n      },\n      changeCase: function (cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections()\n        var swapped = []\n        var toLower = args.toLower\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j]\n          var text = ''\n          if (toLower === true) {\n            text = toSwap.toLowerCase()\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase()\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i)\n              text += isUpperCase(character)\n                ? character.toLowerCase()\n                : character.toUpperCase()\n            }\n          }\n          swapped.push(text)\n        }\n        cm.replaceSelections(swapped)\n        if (args.shouldMoveCursor) {\n          return newHead\n        } else if (\n          !cm.state.vim.visualMode &&\n          args.linewise &&\n          ranges[0].anchor.line + 1 == ranges[0].head.line\n        ) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor)\n        } else if (args.linewise) {\n          return oldAnchor\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head)\n        }\n      },\n      yank: function (cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim\n        var text = cm.getSelection()\n        var endPos = vim.visualMode\n          ? cursorMin(\n              vim.sel.anchor,\n              vim.sel.head,\n              ranges[0].head,\n              ranges[0].anchor\n            )\n          : oldAnchor\n        vimGlobalState.registerController.pushText(\n          args.registerName,\n          'yank',\n          text,\n          args.linewise,\n          vim.visualBlock\n        )\n        return endPos\n      }\n    }\n\n    function defineOperator(name, fn) {\n      operators[name] = fn\n    }\n\n    var actions = {\n      jumpListWalk: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat\n        var forward = actionArgs.forward\n        var jumpList = vimGlobalState.jumpList\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat)\n        var markPos = mark ? mark.find() : undefined\n        markPos = markPos || cm.getCursor()\n        cm.setCursor(markPos)\n      },\n      scroll: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat || 1\n        var lineHeight = cm.defaultTextHeight()\n        var top = cm.getScrollInfo().top\n        var delta = lineHeight * repeat\n        var newPos = actionArgs.forward ? top + delta : top - delta\n        var cursor = copyCursor(cm.getCursor())\n        var cursorCoords = cm.charCoords(cursor, 'local')\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n            cursor.line += (newPos - cursorCoords.top) / lineHeight\n            cursor.line = Math.ceil(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(null, cursorCoords.top)\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight\n          if (newBottom < cursorCoords.bottom) {\n            cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight\n            cursor.line = Math.floor(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(\n              null,\n              cursorCoords.bottom - cm.getScrollInfo().clientHeight\n            )\n          } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        }\n      },\n      scrollToCursor: function (cm, actionArgs) {\n        var lineNum = cm.getCursor().line\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local')\n        var height = cm.getScrollInfo().clientHeight\n        var y = charCoords.top\n        var lineHeight = charCoords.bottom - y\n        switch (actionArgs.position) {\n          case 'center':\n            y = y - height / 2 + lineHeight\n            break\n          case 'bottom':\n            y = y - height + lineHeight\n            break\n        }\n        cm.scrollTo(null, y)\n      },\n      replayMacro: function (cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter\n        var repeat = actionArgs.repeat\n        var macroModeState = vimGlobalState.macroModeState\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister\n        }\n        while (repeat--) {\n          executeMacroRegister(cm, vim, macroModeState, registerName)\n        }\n      },\n      enterMacroRecordMode: function (cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState\n        var registerName = actionArgs.selectedCharacter\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName)\n        }\n      },\n      toggleOverwrite: function (cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'replace' })\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'insert' })\n        }\n      },\n      enterInsertMode: function (cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) {\n          return\n        }\n        cm.getWrapperElement().classList.add('insert-mode')\n        cm.getWrapperElement().classList.remove('visual-mode')\n        cm.getWrapperElement().classList.remove('normal-mode')\n        vim.insertMode = true\n        vim.insertModeRepeat = (actionArgs && actionArgs.repeat) || 1\n        var insertAt = actionArgs ? actionArgs.insertAt : null\n        var sel = vim.sel\n        var head = actionArgs.head || cm.getCursor('head')\n        var height = cm.listSelections().length\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line))\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1)\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head)\n        } else if (insertAt == 'startOfSelectedArea') {\n          logger.debug('startOfSelectedArea:', vim.visualBlock)\n          logger.debug('sel:', JSON.stringify(sel, null, 2))\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.min(sel.head.ch, sel.anchor.ch)\n            )\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1)\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.max(sel.head.ch + 1, sel.anchor.ch)\n            )\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode) {\n            return\n          }\n        }\n        cm.setOption('disableInput', false)\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'replace' })\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', { mode: 'insert' })\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange)\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n        }\n        selectForInsert(cm, head, height)\n      },\n      toggleVisualMode: function (cm, actionArgs, vim) {\n        logger.debug('toggleVisualMode', actionArgs)\n        var repeat = actionArgs.repeat\n        var anchor = cm.getCursor()\n        var head\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          head = clipCursorToContent(\n            cm,\n            Pos(anchor.line, anchor.ch + repeat - 1),\n            true /** includeLineBreak */\n          )\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n        } else if (\n          vim.visualLine ^ actionArgs.linewise ||\n          vim.visualBlock ^ actionArgs.blockwise\n        ) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n          updateCmSelection(cm)\n        } else {\n          exitVisualMode(cm)\n        }\n      },\n      reselectLastSelection: function (cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim)\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find()\n          var head = lastSelection.headMark.find()\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          vim.visualMode = true\n          vim.visualLine = lastSelection.visualLine\n          vim.visualBlock = lastSelection.visualBlock\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine\n              ? 'linewise'\n              : vim.visualBlock\n              ? 'blockwise'\n              : ''\n          })\n        }\n      },\n      joinLines: function (cm, actionArgs, vim) {\n        var curStart, curEnd\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor')\n          curEnd = cm.getCursor('head')\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd\n            curEnd = curStart\n            curStart = tmp\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2)\n          curStart = cm.getCursor()\n          curEnd = clipCursorToContent(\n            cm,\n            Pos(curStart.line + repeat - 1, Infinity)\n          )\n        }\n        var finalCh = 0\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line)\n          var tmp = Pos(curStart.line + 1, lineLength(cm, curStart.line + 1))\n          var text = cm.getRange(curStart, tmp)\n          text = text.replace(/\\n\\s*/g, ' ')\n          cm.replaceRange(text, curStart, tmp)\n        }\n        var curFinalPos = Pos(curStart.line, finalCh)\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curFinalPos)\n      },\n      newLineAndEnterInsertMode: function (cm, actionArgs, vim) {\n        vim.insertMode = true\n        var insertAt = copyCursor(cm.getCursor())\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0))\n          cm.setCursor(cm.firstLine(), 0)\n        } else {\n          insertAt.line = actionArgs.after ? insertAt.line : insertAt.line - 1\n          insertAt.ch = lineLength(cm, insertAt.line)\n          cm.setCursor(insertAt)\n          var newlineFn =\n            CodeMirror.commands.newlineAndIndentContinueComment ||\n            CodeMirror.commands.newlineAndIndent\n          newlineFn(cm)\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim)\n      },\n      paste: function (cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor())\n        var register = vimGlobalState.registerController.getRegister(\n          actionArgs.registerName\n        )\n        var text = register.toString()\n        if (!text) {\n          return\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption('tabSize')\n          // length that considers tabs and tabSize\n          var whitespaceLength = function (str) {\n            var tabs = str.split('\\t').length - 1\n            var spaces = str.split(' ').length - 1\n            return tabs * tabSize + spaces * 1\n          }\n          var currentLine = cm.getLine(cm.getCursor().line)\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0])\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '')\n          var wasChomped = text !== chompedText\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0])\n          var text = chompedText.replace(/^\\s*/gm, function (wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent)\n            if (newIndent < 0) {\n              return ''\n            } else if (cm.getOption('indentWithTabs')) {\n              var quotient = Math.floor(newIndent / tabSize)\n              return Array(quotient + 1).join('\\t')\n            } else {\n              return Array(newIndent + 1).join(' ')\n            }\n          })\n          text += wasChomped ? '\\n' : ''\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text)\n        }\n        var linewise = register.linewise\n        var blockwise = register.blockwise\n        if (linewise) {\n          if (vim.visualMode) {\n            text = vim.visualLine\n              ? text.slice(0, -1)\n              : '\\n' + text.slice(0, text.length - 1) + '\\n'\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1)\n            cur.ch = lineLength(cm, cur.line)\n          } else {\n            cur.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n')\n            for (var i = 0; i < text.length; i++) {\n              text[i] = text[i] == '' ? ' ' : text[i]\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0\n        }\n        var curPosFinal\n        var idx\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text\n          var lastSelectionCurEnd\n          var selectedArea = getSelectedAreaRange(cm, vim)\n          var selectionStart = selectedArea[0]\n          var selectionEnd = selectedArea[1]\n          var selectedText = cm.getSelection()\n          var selections = cm.listSelections()\n          var emptyStrings = new Array(selections.length).join('1').split('1')\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find()\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(\n            selectedText\n          )\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings)\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(\n              selectionStart.line + text.length - 1,\n              selectionStart.ch\n            )\n            cm.setCursor(selectionStart)\n            selectBlock(cm, selectionEnd)\n            cm.replaceSelections(text)\n            curPosFinal = selectionStart\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings)\n            cm.setCursor(selectionStart)\n            cm.replaceRange(text, selectionStart, selectionStart)\n            curPosFinal = selectionStart\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd)\n            curPosFinal = cm.posFromIndex(\n              cm.indexFromPos(selectionStart) + text.length - 1\n            )\n          }\n          // restore the the curEnd marker\n          if (lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd)\n          }\n          if (linewise) {\n            curPosFinal.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur)\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line + i\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n', Pos(line, 0))\n              }\n              var lastCh = lineLength(cm, line)\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch)\n              }\n            }\n            cm.setCursor(cur)\n            selectBlock(cm, Pos(cur.line + text.length - 1, cur.ch))\n            cm.replaceSelections(text)\n            curPosFinal = cur\n          } else {\n            cm.replaceRange(text, cur)\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line + 1,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1))\n              )\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line))\n              )\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length - 1)\n            } else {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length)\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curPosFinal)\n      },\n      undo: function (cm, actionArgs) {\n        cm.operation(function () {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)()\n          cm.setCursor(cm.getCursor('anchor'))\n        })\n      },\n      redo: function (cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)()\n      },\n      setRegister: function (_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter\n      },\n      setMark: function (cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter\n        updateMark(cm, vim, markName, cm.getCursor())\n      },\n      replace: function (cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter\n        var curStart = cm.getCursor()\n        var replaceTo\n        var curEnd\n        var selections = cm.listSelections()\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start')\n          curEnd = cm.getCursor('end')\n        } else {\n          var line = cm.getLine(curStart.line)\n          replaceTo = curStart.ch + actionArgs.repeat\n          if (replaceTo > line.length) {\n            replaceTo = line.length\n          }\n          curEnd = Pos(curStart.line, replaceTo)\n        }\n        if (replaceWith == '\\n') {\n          if (!vim.visualMode)\n            cm.replaceRange('', curStart, curEnd)\n            // special case, where vim help says to replace by just one line-break\n          ;(\n            CodeMirror.commands.newlineAndIndentContinueComment ||\n            CodeMirror.commands.newlineAndIndent\n          )(cm)\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd)\n          // replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith)\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption('tabSize') + 1).join(' ')\n            replaceWithStr = cm.getSelection()\n            replaceWithStr = replaceWithStr\n              .replace(/\\t/g, spaces)\n              .replace(/[^\\n]/g, replaceWith)\n              .split('\\n')\n            cm.replaceSelections(replaceWithStr)\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd)\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head)\n              ? selections[0].anchor\n              : selections[0].head\n            cm.setCursor(curStart)\n            exitVisualMode(cm, false)\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1))\n          }\n        }\n      },\n      incrementNumberToken: function (cm, actionArgs) {\n        var cur = cm.getCursor()\n        var lineStr = cm.getLine(cur.line)\n        var re = /-?\\d+/g\n        var match\n        var start\n        var end\n        var numberStr\n        var token\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0]\n          start = match.index\n          end = start + token.length\n          if (cur.ch < end) break\n        }\n        if (!actionArgs.backtrack && end <= cur.ch) return\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1\n          var number = parseInt(token) + increment * actionArgs.repeat\n          var from = Pos(cur.line, start)\n          var to = Pos(cur.line, end)\n          numberStr = number.toString()\n          cm.replaceRange(numberStr, from, to)\n        } else {\n          return\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1))\n      },\n      repeatLastEdit: function (cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState\n        if (!lastEditInputState) {\n          return\n        }\n        var repeat = actionArgs.repeat\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */)\n      },\n      indent: function (cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight)\n      },\n      exitInsertMode: exitInsertMode\n    }\n\n    function defineAction(name, fn) {\n      actions[name] = fn\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine())\n      var maxCh = lineLength(cm, line) - 1\n      maxCh = includeLineBreak ? maxCh + 1 : maxCh\n      var ch = Math.min(Math.max(0, cur.ch), maxCh)\n      return Pos(line, ch)\n    }\n    function copyArgs(args) {\n      var ret = {}\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop]\n        }\n      }\n      return ret\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch\n        offsetLine = offsetLine.line\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh)\n    }\n    function getOffset(anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      }\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match,\n        partial = [],\n        full = []\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i]\n        if (\n          (context == 'insert' && command.context != 'insert') ||\n          (command.context && command.context != context) ||\n          (inputState.operator && command.type == 'action') ||\n          !(match = commandMatch(keys, command.keys))\n        ) {\n          continue\n        }\n        if (match == 'partial') {\n          partial.push(command)\n        }\n        if (match == 'full') {\n          full.push(command)\n        }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      }\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11\n        var pressedPrefix = pressed.slice(0, prefixLen)\n        var mappedPrefix = mapped.slice(0, prefixLen)\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen\n          ? 'full'\n          : mappedPrefix.indexOf(pressedPrefix) == 0\n          ? 'partial'\n          : false\n      } else {\n        return pressed == mapped\n          ? 'full'\n          : mapped.indexOf(pressed) == 0\n          ? 'partial'\n          : false\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys)\n      var selectedCharacter = match ? match[1] : keys.slice(-1)\n      if (selectedCharacter.length > 1) {\n        switch (selectedCharacter) {\n          case '<CR>':\n            selectedCharacter = '\\n'\n            break\n          case '<Space>':\n            selectedCharacter = ' '\n            break\n          default:\n            selectedCharacter = ''\n            break\n        }\n      }\n      return selectedCharacter\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function () {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm)\n        }\n      }\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch)\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true\n      }\n      return false\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(\n          undefined,\n          Array.prototype.slice.call(arguments, 1)\n        )\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(\n          undefined,\n          Array.prototype.slice.call(arguments, 1)\n        )\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2)\n      var cur2before3 = cursorIsBefore(cur2, cur3)\n      return cur1before2 && cur2before3\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim()\n      }\n      return s.replace(/^\\s+|\\s+$/g, '')\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum)\n      var spaces = new Array(column - endCh + 1).join(' ')\n      cm.setCursor(Pos(lineNum, endCh))\n      cm.replaceRange(spaces, cm.getCursor())\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [],\n        ranges = cm.listSelections()\n      var head = copyCursor(cm.clipPos(selectionEnd))\n      var isClipped = !cursorEqual(selectionEnd, head)\n      var curHead = cm.getCursor('head')\n      var primIndex = getIndex(ranges, curHead)\n      var wasClipped = cursorEqual(\n        ranges[primIndex].head,\n        ranges[primIndex].anchor\n      )\n      var max = ranges.length - 1\n      var index = max - primIndex > primIndex ? max : 0\n      var base = ranges[index].anchor\n\n      var firstLine = Math.min(base.line, head.line)\n      var lastLine = Math.max(base.line, head.line)\n      var baseCh = base.ch,\n        headCh = head.ch\n\n      var dir = ranges[index].head.ch - baseCh\n      var newDir = headCh - baseCh\n      if (dir > 0 && newDir <= 0) {\n        baseCh++\n        if (!isClipped) {\n          headCh--\n        }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--\n        if (!wasClipped) {\n          headCh++\n        }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--\n        headCh++\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {\n          anchor: new Pos(line, baseCh),\n          head: new Pos(line, headCh)\n        }\n        selections.push(range)\n      }\n      cm.setSelections(selections)\n      selectionEnd.ch = headCh\n      base.ch = baseCh\n      return base\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = []\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0)\n        sel.push({ anchor: lineHead, head: lineHead })\n      }\n      cm.setSelections(sel, 0)\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor)\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor)\n        if (atAnchor || atHead) {\n          return i\n        }\n      }\n      return -1\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection\n      var getCurrentSelectedAreaRange = function () {\n        var selections = cm.listSelections()\n        var start = selections[0]\n        var end = selections[selections.length - 1]\n        var selectionStart = cursorIsBefore(start.anchor, start.head)\n          ? start.anchor\n          : start.head\n        var selectionEnd = cursorIsBefore(end.anchor, end.head)\n          ? end.head\n          : end.anchor\n        return [selectionStart, selectionEnd]\n      }\n      var getLastSelectedAreaRange = function () {\n        var selectionStart = cm.getCursor()\n        var selectionEnd = cm.getCursor()\n        var block = lastSelection.visualBlock\n        if (block) {\n          var width = block.width\n          var height = block.height\n          selectionEnd = Pos(\n            selectionStart.line + height,\n            selectionStart.ch + width\n          )\n          var selections = []\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch)\n            var head = Pos(i, selectionEnd.ch)\n            var range = { anchor: anchor, head: head }\n            selections.push(range)\n          }\n          cm.setSelections(selections)\n        } else {\n          var start = lastSelection.anchorMark.find()\n          var end = lastSelection.headMark.find()\n          var line = end.line - start.line\n          var ch = end.ch - start.ch\n          selectionEnd = {\n            line: selectionEnd.line + line,\n            ch: line ? selectionEnd.ch : ch + selectionEnd.ch\n          }\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0)\n            selectionEnd = Pos(\n              selectionEnd.line,\n              lineLength(cm, selectionEnd.line)\n            )\n          }\n          cm.setSelection(selectionStart, selectionEnd)\n        }\n        return [selectionStart, selectionEnd]\n      }\n      if (!vim.visualMode) {\n        // In case of replaying the action.\n        return getLastSelectedAreaRange()\n      } else {\n        return getCurrentSelectedAreaRange()\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor\n      var head = vim.sel.head\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(\n          cm.indexFromPos(anchor) + vim.lastPastedText.length\n        )\n        vim.lastPastedText = null\n      }\n      vim.lastSelection = {\n        anchorMark: cm.setBookmark(anchor),\n        headMark: cm.setBookmark(head),\n        anchor: copyCursor(anchor),\n        head: copyCursor(head),\n        visualMode: vim.visualMode,\n        visualLine: vim.visualLine,\n        visualBlock: vim.visualBlock\n      }\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel\n      var head = sel.head\n      var anchor = sel.anchor\n      var tmp\n      if (cursorIsBefore(end, start)) {\n        tmp = end\n        end = start\n        start = tmp\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head)\n        anchor = cursorMax(anchor, end)\n      } else {\n        anchor = cursorMin(start, anchor)\n        head = cursorMax(head, end)\n        head = offsetCursor(head, 0, -1)\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1))\n        }\n      }\n      return [anchor, head]\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim\n      sel = sel || vim.sel\n      var mode =\n        mode || vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char'\n      var cmSel = makeCmSelection(cm, sel, mode)\n      cm.setSelections(cmSel.ranges, cmSel.primary)\n      updateFakeCursor(cm)\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head)\n      var anchor = copyCursor(sel.anchor)\n      if (mode == 'char') {\n        var headOffset =\n          !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        head = offsetCursor(sel.head, 0, headOffset)\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset)\n        return {\n          ranges: [{ anchor: anchor, head: head }],\n          primary: 0\n        }\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0\n\n          var lastLine = cm.lastLine()\n          if (head.line > lastLine) {\n            head.line = lastLine\n          }\n          head.ch = lineLength(cm, head.line)\n        } else {\n          head.ch = 0\n          anchor.ch = lineLength(cm, anchor.line)\n        }\n        return {\n          ranges: [{ anchor: anchor, head: head }],\n          primary: 0\n        }\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n          left = Math.min(anchor.ch, head.ch),\n          bottom = Math.max(anchor.line, head.line),\n          right = Math.max(anchor.ch, head.ch) + 1\n        var height = bottom - top + 1\n        var primary = head.line == top ? 0 : height - 1\n        var ranges = []\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          })\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        }\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head')\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'))\n      }\n      return cur\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n     * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head))\n      }\n      updateLastSelection(cm, vim)\n      vim.visualMode = false\n      vim.visualLine = false\n      vim.visualBlock = false\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd)\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n')\n        // We know this is all whitespace.\n        lines.pop()\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (\n          var line = lines.pop();\n          lines.length > 0 && line && isWhiteSpaceString(line);\n          line = lines.pop()\n        ) {\n          curEnd.line--\n          curEnd.ch = 0\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--\n          curEnd.ch = lineLength(cm, curEnd.line)\n        } else {\n          curEnd.ch = 0\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0\n      curEnd.ch = 0\n      curEnd.line++\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0\n      }\n      var firstNonWS = text.search(/\\S/)\n      return firstNonWS == -1 ? text.length : firstNonWS\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm)\n      var line = cm.getLine(cur.line)\n      var idx = cur.ch\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest[0]\n      while (!test(line.charAt(idx))) {\n        idx++\n        if (idx >= line.length) {\n          return null\n        }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0]\n      } else {\n        test = wordCharTest[0]\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1]\n        }\n      }\n\n      var end = idx,\n        start = idx\n      while (test(line.charAt(end)) && end < line.length) {\n        end++\n      }\n      while (test(line.charAt(start)) && start >= 0) {\n        start--\n      }\n      start++\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end\n        while (/\\s/.test(line.charAt(end)) && end < line.length) {\n          end++\n        }\n        if (wordEnd == end) {\n          var wordStart = start\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) {\n            start--\n          }\n          if (!start) {\n            start = wordStart\n          }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) }\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur)\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n      vimGlobalState.lastCharacterSearch.increment = increment\n      vimGlobalState.lastCharacterSearch.forward = args.forward\n      vimGlobalState.lastCharacterSearch.selectedCharacter =\n        args.selectedCharacter\n    }\n\n    var symbolToMode = {\n      '(': 'bracket',\n      ')': 'bracket',\n      '{': 'bracket',\n      '}': 'bracket',\n      '[': 'section',\n      ']': 'section',\n      '*': 'comment',\n      '/': 'comment',\n      m: 'method',\n      M: 'method',\n      '#': 'preprocess'\n    }\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) {\n            state.depth++\n            if (state.depth >= 1) return true\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--\n          }\n          return false\n        }\n      },\n      section: {\n        init: function (state) {\n          state.curMoveThrough = true\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}'\n        },\n        isComplete: function (state) {\n          return state.index === 0 && state.nextCh === state.symb\n        }\n      },\n      comment: {\n        isComplete: function (state) {\n          var found = state.lastCh === '*' && state.nextCh === '/'\n          state.lastCh = state.nextCh\n          return found\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function (state) {\n          state.symb = state.symb === 'm' ? '{' : '}'\n          state.reverseSymb = state.symb === '{' ? '}' : '{'\n        },\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) return true\n          return false\n        }\n      },\n      preprocess: {\n        init: function (state) {\n          state.index = 0\n        },\n        isComplete: function (state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1]\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth++\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth--\n            }\n            if (token === 'else' && state.depth === 0) return true\n          }\n          return false\n        }\n      }\n    }\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor())\n      var increment = forward ? 1 : -1\n      var endLine = forward ? cm.lineCount() : -1\n      var curCh = cur.ch\n      var line = cur.line\n      var lineText = cm.getLine(line)\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward\n          ? { ')': '(', '}': '{' }\n          : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      }\n      var mode = symbolToMode[symb]\n      if (!mode) return cur\n      var init = findSymbolModes[mode].init\n      var isComplete = findSymbolModes[mode].isComplete\n      if (init) {\n        init(state)\n      }\n      while (line !== endLine && repeat) {\n        state.index += increment\n        state.nextCh = state.lineText.charAt(state.index)\n        if (!state.nextCh) {\n          line += increment\n          state.lineText = cm.getLine(line) || ''\n          if (increment > 0) {\n            state.index = 0\n          } else {\n            var lineLen = state.lineText.length\n            state.index = lineLen > 0 ? lineLen - 1 : 0\n          }\n          state.nextCh = state.lineText.charAt(state.index)\n        }\n        if (isComplete(state)) {\n          cur.line = line\n          cur.ch = state.index\n          repeat--\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index)\n      }\n      return cur\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line\n      var pos = cur.ch\n      var line = cm.getLine(lineNum)\n      var dir = forward ? 1 : -1\n      var charTests = bigWord ? bigWordCharTest : wordCharTest\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir\n        line = cm.getLine(lineNum)\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        pos = forward ? 0 : line.length\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum }\n        }\n        var stop = dir > 0 ? line.length : -1\n        var wordStart = stop,\n          wordEnd = stop\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir\n              }\n              wordEnd = pos\n              foundWord = wordStart != wordEnd\n              if (\n                wordStart == cur.ch &&\n                lineNum == cur.line &&\n                wordEnd == wordStart + dir\n              ) {\n                // We started at the end of a word. Find the next one.\n                continue\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum\n                }\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        line = cm.getLine(lineNum)\n        pos = dir > 0 ? 0 : line.length\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur)\n      var words = []\n      if ((forward && !wordEnd) || (!forward && wordEnd)) {\n        repeat++\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd)\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord)\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine())\n          words.push(\n            forward\n              ? { line: cm.lastLine(), from: eodCh, to: eodCh }\n              : { line: 0, from: 0, to: 0 }\n          )\n          break\n        }\n        words.push(word)\n        cur = Pos(word.line, forward ? word.to - 1 : word.from)\n      }\n      var shortCircuit = words.length != repeat\n      var firstWord = words[0]\n      var lastWord = words.pop()\n      if (forward && !wordEnd) {\n        // w\n        if (\n          !shortCircuit &&\n          (firstWord.from != curStart.ch || firstWord.line != curStart.line)\n        ) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.from)\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1)\n      } else if (!forward && wordEnd) {\n        // ge\n        if (\n          !shortCircuit &&\n          (firstWord.to != curStart.ch || firstWord.line != curStart.line)\n        ) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.to)\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from)\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor()\n      var start = cur.ch\n      var idx\n      for (var i = 0; i < repeat; i++) {\n        var line = cm.getLine(cur.line)\n        idx = charIdxInLine(start, line, character, forward, true)\n        if (idx == -1) {\n          return null\n        }\n        start = idx\n      }\n      return Pos(cm.getCursor().line, idx)\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line\n      return clipCursorToContent(cm, Pos(line, repeat - 1))\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear()\n      }\n      vim.marks[markName] = cm.setBookmark(pos)\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx\n      if (forward) {\n        idx = line.indexOf(character, start + 1)\n        if (idx != -1 && !includeChar) {\n          idx -= 1\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1)\n        if (idx != -1 && !includeChar) {\n          idx += 1\n        }\n      }\n      return idx\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line\n      var min = cm.firstLine()\n      var max = cm.lastLine()\n      var start,\n        end,\n        i = line\n      function isEmpty(i) {\n        return !cm.getLine(i)\n      }\n      function isBoundary(i, dir, any) {\n        if (any) {\n          return isEmpty(i) != isEmpty(i + dir)\n        }\n        return !isEmpty(i) && isEmpty(i + dir)\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) {\n            repeat--\n          }\n          i += dir\n        }\n        return new Pos(i, 0)\n      }\n\n      var vim = cm.state.vim\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1\n          }\n        }\n      }\n      var startState = isEmpty(line)\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--\n          }\n        }\n      }\n      end = new Pos(i, 0)\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) {\n        startState = true\n      } else {\n        inclusive = false\n      }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) {\n            break\n          }\n        }\n      }\n      start = new Pos(i, 0)\n      return { start: start, end: end }\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head,\n        start,\n        end\n\n      var bracketRegexp = {\n        '(': /[()]/,\n        ')': /[()]/,\n        '[': /[[\\]]/,\n        ']': /[[\\]]/,\n        '{': /[{}]/,\n        '}': /[{}]/\n      }[symb]\n      var openSym = {\n        '(': '(',\n        ')': '(',\n        '[': '[',\n        ']': '[',\n        '{': '{',\n        '}': '{'\n      }[symb]\n      var curChar = cm.getLine(cur.line).charAt(cur.ch)\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {\n        bracketRegex: bracketRegexp\n      })\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {\n        bracketRegex: bracketRegexp\n      })\n\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      start = start.pos\n      end = end.pos\n\n      if (\n        (start.line == end.line && start.ch > end.ch) ||\n        start.line > end.line\n      ) {\n        var tmp = start\n        start = end\n        end = tmp\n      }\n\n      if (inclusive) {\n        end.ch += 1\n      } else {\n        start.ch += 1\n      }\n\n      return { start: start, end: end }\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head)\n      var line = cm.getLine(cur.line)\n      var chars = line.split('')\n      var start, end, i, len\n      var firstIndex = chars.indexOf(symb)\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch // assign end to the current cursor\n        --cur.ch // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1 // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start\n        ++end\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      }\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean')\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function () {\n        return vimGlobalState.query\n      },\n      setQuery: function (query) {\n        vimGlobalState.query = query\n      },\n      getOverlay: function () {\n        return this.searchOverlay\n      },\n      setOverlay: function (overlay) {\n        this.searchOverlay = overlay\n      },\n      isReversed: function () {\n        return vimGlobalState.isReversed\n      },\n      setReversed: function (reversed) {\n        vimGlobalState.isReversed = reversed\n      },\n      getScrollbarAnnotate: function () {\n        return this.annotate\n      },\n      setScrollbarAnnotate: function (annotate) {\n        this.annotate = annotate\n      }\n    }\n    function getSearchState(cm) {\n      var vim = cm.state.vim\n      return vim.searchState_ || (vim.searchState_ = new SearchState())\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, {\n          bottom: true,\n          value: options.value,\n          onKeyDown: options.onKeyDown,\n          onKeyUp: options.onKeyUp,\n          selectValueOnOpen: false\n        })\n      } else {\n        onClose(prompt(shortText, ''))\n      }\n    }\n    function splitBySlash(argString) {\n      var slashes = findUnescapedSlashes(argString) || []\n      if (!slashes.length) return []\n      var tokens = []\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] === 'number') {\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i + 1]))\n        }\n      }\n      return tokens\n    }\n\n    function findUnescapedSlashes(str) {\n      var escapeNextChar = false\n      var slashes = []\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i)\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i)\n        }\n        escapeNextChar = !escapeNextChar && c == '\\\\'\n      }\n      return slashes\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){'\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}'\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        var specialComesNext = n && specials.indexOf(n) != -1\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c)\n          }\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c)\n            }\n          } else {\n            out.push(c)\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = { '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t' }\n    function translateRegexReplace(str) {\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c + n])\n          i++\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c)\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            if (isNumber(n) || n === '$') {\n              out.push('$')\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          } else {\n            if (c === '$') {\n              out.push('$')\n            }\n            out.push(c)\n            if (n === '/') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {\n      '\\\\/': '/',\n      '\\\\\\\\': '\\\\',\n      '\\\\n': '\\n',\n      '\\\\r': '\\r',\n      '\\\\t': '\\t'\n    }\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str)\n      var output = []\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next())\n        }\n        var matched = false\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true\n            output.push(unescapes[matcher])\n            break\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next())\n        }\n      }\n      return output.join('')\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister =\n        vimGlobalState.registerController.getRegister('/')\n      lastSearchRegister.setText(query)\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) {\n        return query\n      }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query)\n      var regexPart\n      var forceIgnoreCase\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0])\n        var flagsPart = query.substring(slashes[0])\n        forceIgnoreCase = flagsPart.indexOf('i') != -1\n      }\n      if (!regexPart) {\n        return null\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart)\n      }\n      if (smartCase) {\n        ignoreCase = /^[^A-Z]*$/.test(regexPart)\n      }\n      var regexp = new RegExp(\n        regexPart,\n        ignoreCase || forceIgnoreCase ? 'i' : undefined\n      )\n      return regexp\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>', {\n          bottom: true,\n          duration: 5000\n        })\n      } else {\n        alert(text)\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw =\n        '<span style=\"font-family: monospace; white-space: pre\">' +\n        (prefix || '') +\n        '<input type=\"text\"></span>'\n      if (desc) {\n        raw += ' <span style=\"color: #888\">' + desc + '</span>'\n      }\n      return raw\n    }\n    var searchPromptDesc = '(Javascript regexp)'\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '')\n      var prompt = makePrompt(options.prefix, options.desc)\n      dialog(cm, prompt, shortText, options.onClose, options)\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n        var props = ['global', 'multiline', 'ignoreCase', 'source']\n        for (var i = 0; i < props.length; i++) {\n          var prop = props[i]\n          if (r1[prop] !== r2[prop]) {\n            return false\n          }\n        }\n        return true\n      }\n      return false\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return\n      }\n      var state = getSearchState(cm)\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase)\n      if (!query) {\n        return\n      }\n      highlightSearchMatches(cm, query)\n      if (regexEqual(query, state.getQuery())) {\n        return query\n      }\n      state.setQuery(query)\n      return query\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true\n      }\n      return {\n        token: function (stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd()\n            return\n          }\n          var match = stream.match(query, false)\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next()\n              return 'searching'\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1)\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next()\n                return null\n              }\n            }\n            stream.match(query)\n            return 'searching'\n          }\n          while (!stream.eol()) {\n            stream.next()\n            if (stream.match(query, false)) break\n          }\n        },\n        query: query\n      }\n    }\n    function highlightSearchMatches(cm, query) {\n      var searchState = getSearchState(cm)\n      var overlay = searchState.getOverlay()\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay)\n        }\n        overlay = searchOverlay(query)\n        cm.addOverlay(overlay)\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear()\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query))\n        }\n        searchState.setOverlay(overlay)\n      }\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) {\n        repeat = 1\n      }\n      return cm.operation(function () {\n        var pos = cm.getCursor()\n        var cursor = cm.getSearchCursor(query, pos)\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev)\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n            found = cursor.find(prev)\n          }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(\n              query,\n              prev ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0)\n            )\n            if (!cursor.find(prev)) {\n              return\n            }\n          }\n        }\n        return cursor.from()\n      })\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm)\n      cm.removeOverlay(getSearchState(cm).getOverlay())\n      state.setOverlay(null)\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear()\n        state.setScrollbarAnnotate(null)\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos !== 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start)\n      } else {\n        if (end) {\n          return pos >= start && pos <= end\n        } else {\n          return pos == start\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo()\n      var occludeToleranceTop = 6\n      var occludeToleranceBottom = 10\n      var from = cm.coordsChar(\n        { left: 0, top: occludeToleranceTop + scrollInfo.top },\n        'local'\n      )\n      var bottomY =\n        scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top\n      var to = cm.coordsChar({ left: 0, top: bottomY }, 'local')\n      return { top: from.line, bottom: to.line }\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == \"'\") {\n        var history = cm.doc.history.done\n        var event = history[history.length - 2]\n        return event && event.ranges && event.ranges[0].head\n      }\n\n      var mark = vim.marks[markName]\n      return mark && mark.find()\n    }\n\n    var ExCommandDispatcher = function () {\n      this.buildCommandMap_()\n    }\n    ExCommandDispatcher.prototype = {\n      processCommand: function (cm, input, opt_params) {\n        var that = this\n        cm.operation(function () {\n          cm.curOp.isVimOp = true\n          that._processCommand(cm, input, opt_params)\n        })\n      },\n      _processCommand: function (cm, input, opt_params) {\n        var vim = cm.state.vim\n        var commandHistoryRegister =\n          vimGlobalState.registerController.getRegister(':')\n        var previousCommand = commandHistoryRegister.toString()\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        var inputStream = new CodeMirror.StringStream(input)\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input)\n        var params = opt_params || {}\n        params.input = input\n        try {\n          this.parseInput_(cm, inputStream, params)\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n        var command\n        var commandName\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move'\n          }\n        } else {\n          command = this.matchCommand_(params.commandName)\n          if (command) {\n            commandName = command.name\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand)\n            }\n            this.parseCommandArgs_(inputStream, params, command)\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping')\n              }\n              return\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput)\n              return\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"')\n          return\n        }\n        try {\n          exCommands[commandName](cm, params)\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback()\n          }\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n      },\n      parseInput_: function (cm, inputStream, result) {\n        inputStream.eatWhile(':')\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine()\n          result.lineEnd = cm.lastLine()\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream)\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream)\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/)\n        if (commandMatch) {\n          result.commandName = commandMatch[1]\n        } else {\n          result.commandName = inputStream.match(/.*/)[0]\n        }\n\n        return result\n      },\n      parseLineSpec_: function (cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/)\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine())\n          case \"'\":\n            var markName = inputStream.next()\n            var markPos = getMarkPos(cm, cm.state.vim, markName)\n            if (!markPos) throw new Error('Mark not set')\n            return this.parseLineSpecOffset_(inputStream, markPos.line)\n          case '-':\n          case '+':\n            inputStream.backUp(1)\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          default:\n            inputStream.backUp(1)\n            return undefined\n        }\n      },\n      parseLineSpecOffset_: function (inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/)\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10)\n          if (offsetMatch[1] == '-') {\n            line -= offset\n          } else {\n            line += offset\n          }\n        }\n        return line\n      },\n      parseCommandArgs_: function (inputStream, params, command) {\n        if (inputStream.eol()) {\n          return\n        }\n        params.argString = inputStream.match(/.*/)[0]\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/\n        var args = trim(params.argString).split(delim)\n        if (args.length && args[0]) {\n          params.args = args\n        }\n      },\n      matchCommand_: function (commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i)\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix]\n            if (command.name.indexOf(commandName) === 0) {\n              return command\n            }\n          }\n        }\n        return null\n      },\n      buildCommandMap_: function () {\n        this.commandMap_ = {}\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i]\n          var key = command.shortName || command.name\n          this.commandMap_[key] = command\n        }\n      },\n      map: function (lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings')\n          }\n          var commandName = lhs.substring(1)\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            }\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            }\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            }\n            if (ctx) {\n              mapping.context = ctx\n            }\n            defaultKeymap.unshift(mapping)\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            }\n            if (ctx) {\n              mapping.context = ctx\n            }\n            defaultKeymap.unshift(mapping)\n          }\n        }\n      },\n      unmap: function (lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) {\n            throw Error('Mode not supported for ex mappings')\n          }\n          var commandName = lhs.substring(1)\n          if (\n            this.commandMap_[commandName] &&\n            this.commandMap_[commandName].user\n          ) {\n            delete this.commandMap_[commandName]\n            return\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (\n              keys == defaultKeymap[i].keys &&\n              defaultKeymap[i].context === ctx\n            ) {\n              defaultKeymap.splice(i, 1)\n              return\n            }\n          }\n        }\n        throw Error('No such mapping.')\n      }\n    }\n\n    var exCommands = {\n      colorscheme: function (cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'))\n          return\n        }\n        cm.setOption('theme', params.args[0])\n      },\n      map: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx)\n      },\n      imap: function (cm, params) {\n        this.map(cm, params, 'insert')\n      },\n      nmap: function (cm, params) {\n        this.map(cm, params, 'normal')\n      },\n      vmap: function (cm, params) {\n        this.map(cm, params, 'visual')\n      },\n      unmap: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx)\n      },\n      move: function (cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n          type: 'motion',\n          motion: 'moveToLineOrEdgeOfDocument',\n          motionArgs: { forward: false, explicitRepeat: true, linewise: true },\n          repeatOverride: params.line + 1\n        })\n      },\n      set: function (cm, params) {\n        var setArgs = params.args\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {}\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        var expr = setArgs[0].split('=')\n        var optionName = expr[0]\n        var value = expr[1]\n        var forceGet = false\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) {\n            throw Error('Trailing characters: ' + params.argString)\n          }\n          optionName = optionName.substring(0, optionName.length - 1)\n          forceGet = true\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2)\n          value = false\n        }\n\n        var optionIsBoolean =\n          options[optionName] && options[optionName].type == 'boolean'\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true\n        }\n        // If no value is provided, then we assume this is a get.\n        if ((!optionIsBoolean && value === undefined) || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg)\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message)\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName)\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue)\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg)\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message)\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = { scope: 'local' }\n        this.set(cm, params)\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = { scope: 'global' }\n        this.set(cm, params)\n      },\n      registers: function (cm, params) {\n        var regArgs = params.args\n        var registers = vimGlobalState.registerController.registers\n        var regInfo = '----------Registers----------<br><br>'\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString()\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>'\n            }\n          }\n        } else {\n          var registerName\n          regArgs = regArgs.join('')\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i)\n            if (\n              !vimGlobalState.registerController.isValidRegister(registerName)\n            ) {\n              continue\n            }\n            var register = registers[registerName] || new Register()\n            regInfo +=\n              '\"' + registerName + '    ' + register.toString() + '<br>'\n          }\n        }\n        showConfirm(cm, regInfo)\n      },\n      sort: function (cm, params) {\n        var reverse, ignoreCase, unique, number, pattern\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString)\n            if (args.eat('!')) {\n              reverse = true\n            }\n            if (args.eol()) {\n              return\n            }\n            if (!args.eatSpace()) {\n              return 'Invalid arguments'\n            }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/)\n            if (!opts && !args.eol()) {\n              return 'Invalid arguments'\n            }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1\n              unique = opts[1].indexOf('u') != -1\n              var decimal =\n                opts[1].indexOf('d') != -1 || (opts[1].indexOf('n') != -1 && 1)\n              var hex = opts[1].indexOf('x') != -1 && 1\n              var octal = opts[1].indexOf('o') != -1 && 1\n              if (decimal + hex + octal > 1) {\n                return 'Invalid arguments'\n              }\n              number =\n                (decimal && 'decimal') || (hex && 'hex') || (octal && 'octal')\n            }\n            if (opts[2]) {\n              pattern = new RegExp(\n                opts[2].substr(1, opts[2].length - 2),\n                ignoreCase ? 'i' : ''\n              )\n            }\n          }\n        }\n        var err = parseArgs()\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString)\n          return\n        }\n        var lineStart = params.line || cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        if (lineStart == lineEnd) {\n          return\n        }\n        var curStart = Pos(lineStart, 0)\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd))\n        var text = cm.getRange(curStart, curEnd).split('\\n')\n        var numberRegex =\n          pattern || number == 'decimal'\n            ? /(-?)([\\d]+)/\n            : number == 'hex'\n            ? /(-?)(?:0x)?([0-9a-f]+)/i\n            : number == 'octal'\n            ? /([0-7]+)/\n            : null\n        var radix =\n          number == 'decimal'\n            ? 10\n            : number == 'hex'\n            ? 16\n            : number == 'octal'\n            ? 8\n            : null\n        var numPart = [],\n          textPart = []\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart)\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i])\n            } else {\n              textPart.push(text[i])\n            }\n          }\n        } else {\n          textPart = text\n        }\n        function compareFn(a, b) {\n          if (reverse) {\n            var tmp\n            tmp = a\n            a = b\n            b = tmp\n          }\n          if (ignoreCase) {\n            a = a.toLowerCase()\n            b = b.toLowerCase()\n          }\n          var anum = number && numberRegex.exec(a)\n          var bnum = number && numberRegex.exec(b)\n          if (!anum) {\n            return a < b ? -1 : 1\n          }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix)\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix)\n          return anum - bnum\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) {\n            var tmp\n            tmp = a\n            a = b\n            b = tmp\n          }\n          if (ignoreCase) {\n            a[0] = a[0].toLowerCase()\n            b[0] = b[0].toLowerCase()\n          }\n          return a[0] < b[0] ? -1 : 1\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn)\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input\n          }\n        } else if (!number) {\n          textPart.sort(compareFn)\n        }\n        text = !reverse ? textPart.concat(numPart) : numPart.concat(textPart)\n        if (unique) {\n          // Remove duplicate lines\n          var textOld = text\n          var lastLine\n          text = []\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i])\n            }\n            lastLine = textOld[i]\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd)\n      },\n      global: function (cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global')\n          return\n        }\n        // range is specified here\n        var lineStart = params.line !== undefined ? params.line : cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        // get the tokens from argString\n        var tokens = splitBySlash(argString)\n        var regexPart = argString,\n          cmd\n        if (tokens.length) {\n          regexPart = tokens[0]\n          cmd = tokens.slice(1, tokens.length).join('/')\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n            updateSearchQuery(\n              cm,\n              regexPart,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery()\n        var matchedLines = [],\n          content = ''\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i))\n          if (matched) {\n            matchedLines.push(i + 1)\n            content += cm.getLine(i) + '<br>'\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content)\n          return\n        }\n        var index = 0\n        var nextCommand = function () {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            })\n          }\n          index++\n        }\n        nextCommand()\n      },\n      substitute: function (cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error(\n            'Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.'\n          )\n        }\n        var argString = params.argString\n        var tokens = argString ? splitBySlash(argString) : []\n        var regexPart,\n          replacePart = '',\n          trailing,\n          flagsPart,\n          count\n        var confirm = false // Whether to confirm each replace.\n        var global = false // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0]\n          replacePart = tokens[1]\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n'\n            replacePart = replacePart ? replacePart + '\\n' : '\\n'\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart)\n            } else {\n              replacePart = translateRegexReplace(replacePart)\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : []\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(\n              cm,\n              'Substitutions should be of the form ' + ':s/pattern/replace/'\n            )\n            return\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0]\n          count = parseInt(trailing[1])\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true\n              flagsPart.replace('c', '')\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true\n              flagsPart.replace('g', '')\n            }\n            regexPart = regexPart + '/' + flagsPart\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(\n              cm,\n              regexPart,\n              true /** ignoreCase */,\n              true /** smartCase */\n            )\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression')\n          return\n        }\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        var lineStart =\n          params.line !== undefined ? params.line : cm.getCursor().line\n        var lineEnd = params.lineEnd || lineStart\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity\n        }\n        if (count) {\n          lineStart = lineEnd\n          lineEnd = lineStart + count - 1\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0))\n        var cursor = cm.getSearchCursor(query, startPos)\n        doReplace(\n          cm,\n          confirm,\n          global,\n          lineStart,\n          lineEnd,\n          cursor,\n          query,\n          replacePart,\n          params.callback\n        )\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function (cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm)\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save()\n        }\n      },\n      nohlsearch: function (cm) {\n        clearSearchHighlight(cm)\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor())\n        var line = cur.line\n        var lineText = cm.getLine(line)\n        vimGlobalState.registerController.pushText(\n          '0',\n          'yank',\n          lineText,\n          true,\n          true\n        )\n      },\n      delmarks: function (cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required')\n          return\n        }\n\n        var state = cm.state.vim\n        var stream = new CodeMirror.StringStream(trim(params.argString))\n        while (!stream.eol()) {\n          stream.eatSpace()\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(\n              cm,\n              'Invalid argument: ' + params.argString.substring(count)\n            )\n            return\n          }\n\n          var sym = stream.next()\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(\n                cm,\n                'Invalid argument: ' + params.argString.substring(count)\n              )\n              return\n            }\n\n            var startMark = sym\n            var finishMark = stream.next()\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (\n              (isLowerCase(startMark) && isLowerCase(finishMark)) ||\n              (isUpperCase(startMark) && isUpperCase(finishMark))\n            ) {\n              var start = startMark.charCodeAt(0)\n              var finish = finishMark.charCodeAt(0)\n              if (start >= finish) {\n                showConfirm(\n                  cm,\n                  'Invalid argument: ' + params.argString.substring(count)\n                )\n                return\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j)\n                delete state.marks[mark]\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-')\n              return\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym]\n          }\n        }\n      }\n    }\n\n    var exCommandDispatcher = new ExCommandDispatcher()\n\n    /**\n     * @param {CodeMirror} cm CodeMirror instance we are in.\n     * @param {boolean} confirm Whether to confirm each replace.\n     * @param {Cursor} lineStart Line to start replacing from.\n     * @param {Cursor} lineEnd Line to stop replacing at.\n     * @param {RegExp} query Query for performing matches with.\n     * @param {string} replaceWith Text to replace matches with. May contain $1,\n     *     $2, etc for replacing captured groups using Javascript replace.\n     * @param {function()} callback A callback for when the replace is done.\n     */\n    function doReplace(\n      cm,\n      confirm,\n      global,\n      lineStart,\n      lineEnd,\n      searchCursor,\n      query,\n      replaceWith,\n      callback\n    ) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true\n      var done = false\n      var lastPos = searchCursor.from()\n      function replaceAll() {\n        cm.operation(function () {\n          while (!done) {\n            replace()\n            next()\n          }\n          stop()\n        })\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to())\n        var newText = text.replace(query, replaceWith)\n        searchCursor.replace(newText)\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while (\n          searchCursor.findNext() &&\n          isInRange(searchCursor.from(), lineStart, lineEnd)\n        ) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue\n          }\n          cm.scrollIntoView(searchCursor.from(), 30)\n          cm.setSelection(searchCursor.from(), searchCursor.to())\n          lastPos = searchCursor.from()\n          done = false\n          return\n        }\n        done = true\n      }\n      function stop(close) {\n        if (close) {\n          close()\n        }\n        cm.focus()\n        if (lastPos) {\n          cm.setCursor(lastPos)\n          var vim = cm.state.vim\n          vim.exMode = false\n          vim.lastHPos = vim.lastHSPos = lastPos.ch\n        }\n        if (callback) {\n          callback()\n        }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e)\n        var keyName = CodeMirror.keyName(e)\n        switch (keyName) {\n          case 'Y':\n            replace()\n            next()\n            break\n          case 'N':\n            next()\n            break\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback\n            callback = undefined\n            cm.operation(replaceAll)\n            callback = savedCallback\n            break\n          case 'L':\n            replace()\n          // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close)\n            break\n        }\n        if (done) {\n          stop(close)\n        }\n        return true\n      }\n\n      // Actually do replace.\n      next()\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source)\n        return\n      }\n      if (!confirm) {\n        replaceAll()\n        if (callback) {\n          callback()\n        }\n        return\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      })\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim\n      var macroModeState = vimGlobalState.macroModeState\n      var insertModeChangeRegister =\n        vimGlobalState.registerController.getRegister('.')\n      var isPlaying = macroModeState.isPlaying\n      var lastChange = macroModeState.lastInsertModeChanges\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = []\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock\n          ? vim.lastSelection.visualBlock.height\n          : 1\n        var changes = lastChange.changes\n        var text = []\n        var i = 0\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i])\n          if (changes[i] instanceof InsertModeKey) {\n            i++\n          } else {\n            i += selLength\n          }\n        }\n        lastChange.changes = text\n        cm.off('change', onChange)\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(\n          cm,\n          vim,\n          vim.insertModeRepeat - 1,\n          true /** repeatForInsert */\n        )\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat\n      }\n      delete vim.insertModeRepeat\n      vim.insertMode = false\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch - 1)\n      cm.setOption('keyMap', 'vim')\n      cm.setOption('disableInput', true)\n      cm.toggleOverwrite(false) // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''))\n      CodeMirror.signal(cm, 'vim-mode-change', { mode: 'normal' })\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState)\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command)\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = { keys: keys, type: type }\n      command[type] = name\n      command[type + 'Args'] = args\n      for (var key in extra) {\n        command[key] = extra[key]\n      }\n      _mapCommand(command)\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number')\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      // fallthrough: ['default'],\n      fallthrough: [],\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    CodeMirror.keyMap['vim-replace'] = {\n      Backspace: 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap\n      // call: cmKey\n    }\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0])\n        }\n        macroModeState.isPlaying = false\n        return\n      }\n      var keyBuffer = register.keyBuffer\n      var imc = 0\n      macroModeState.isPlaying = true\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0)\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i]\n        var match, key\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = /<\\w+-.+?>|<\\w+>|./.exec(text)\n          key = match[0]\n          text = text.substring(match.index + key.length)\n          CodeMirror.Vim.handleKey(cm, key, 'macro')\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n              changes\n            repeatInsertModeChanges(cm, changes, 1)\n            exitInsertMode(cm)\n          }\n        }\n      }\n      macroModeState.isPlaying = false\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register) {\n        register.pushText(key)\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges)\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) {\n        return\n      }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query)\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      if (!macroModeState.isPlaying) {\n        while (changeObj) {\n          lastChange.expectCursorActivityForChange = true\n          if (\n            changeObj.origin == '+input' ||\n            changeObj.origin == 'paste' ||\n            changeObj.origin === undefined /* only in testing */\n          ) {\n            var text = changeObj.text.join('\\n')\n            if (lastChange.maybeReset) {\n              lastChange.changes = []\n              lastChange.maybeReset = false\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n              lastChange.changes.push([text])\n            } else {\n              lastChange.changes.push(text)\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next\n        }\n      }\n    }\n\n    /**\n     * Listens for any kind of cursor activity on CodeMirror.\n     */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) {\n          return\n        }\n        var lastChange = macroModeState.lastInsertModeChanges\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim)\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm)\n      }\n    }\n    function updateFakeCursor(cm) {\n      var vim = cm.state.vim\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head))\n      var to = offsetCursor(from, 0, 1)\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n      vim.fakeCursor = cm.markText(from, to, {\n        className: 'cm-animate-fat-cursor'\n      })\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor')\n      var head = cm.getCursor('head')\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false)\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true\n        vim.visualLine = false\n        CodeMirror.signal(cm, 'vim-mode-change', { mode: 'visual' })\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0\n        head = offsetCursor(head, 0, headOffset)\n        anchor = offsetCursor(anchor, 0, anchorOffset)\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        }\n        updateMark(cm, vim, '<', cursorMin(head, anchor))\n        updateMark(cm, vim, '>', cursorMax(head, anchor))\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName\n    }\n\n    /**\n     * Handles raw key down events from the text area.\n     * - Should only be active in insert mode.\n     * - For recording deletes in insert mode.\n     */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      var keyName = CodeMirror.keyName(e)\n      if (!keyName) {\n        return\n      }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = []\n          lastChange.maybeReset = false\n        }\n        lastChange.changes.push(new InsertModeKey(keyName))\n        return true\n      }\n      if (\n        keyName.indexOf('Delete') != -1 ||\n        keyName.indexOf('Backspace') != -1\n      ) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound)\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState\n      macroModeState.isPlaying = true\n      var isAction = !!vim.lastEditActionCommand\n      var cachedInputState = vim.inputState\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand)\n        } else {\n          commandDispatcher.evalInput(cm, vim)\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat\n          var changeObject = macroModeState.lastInsertModeChanges\n          repeatInsertModeChanges(cm, changeObject.changes, repeat)\n        }\n      }\n      vim.inputState = vim.lastEditInputState\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand()\n          repeatInsert(1)\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand()\n        }\n        repeatInsert(repeat)\n      }\n      vim.inputState = cachedInputState\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm)\n      }\n      macroModeState.isPlaying = false\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding === 'string') {\n          CodeMirror.commands[binding](cm)\n        } else {\n          binding(cm)\n        }\n        return true\n      }\n      var head = cm.getCursor('head')\n      var inVisualBlock =\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim\n        var lastSel = vim.lastSelection\n        var offset = getOffset(lastSel.anchor, lastSel.head)\n        selectForInsert(cm, head, offset.line + 1)\n        repeat = cm.listSelections().length\n        cm.setCursor(head)\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0))\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j]\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler)\n          } else if (typeof change === 'string') {\n            var cur = cm.getCursor()\n            cm.replaceRange(change, cur, cur)\n          } else {\n            var start = cm.getCursor()\n            var end = offsetCursor(start, 0, change[0].length)\n            cm.replaceRange(change[0], start, end)\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1))\n      }\n    }\n\n    resetVimGlobalState()\n\n    vimApi.commandDispatcher = commandDispatcher\n    vimApi.exCommandDispatcher = exCommandDispatcher\n    return vimApi\n  }\n\n  // Initialize Vim and make it available as an API.\n  return (CodeMirror.Vim = Vim())\n}\n"],"file":"keymap.js"}